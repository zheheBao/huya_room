function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import { Text, View, TouchableOpacity } from 'react-native';
import { Icon } from '../Icon';
import navigationBarStyles from './styles';
import variables from '../../common/styles/variables';
export var NavigationBar = /*#__PURE__*/function (_Component) {
  _inheritsLoose(NavigationBar, _Component);

  function NavigationBar(props) {
    return _Component.call(this, props) || this;
  }

  var _proto = NavigationBar.prototype;

  _proto.renderItem = function renderItem(index) {
    var _this$props = this.props,
        backLabel = _this$props.backLabel,
        backLabelIcon = _this$props.backLabelIcon,
        backLabelText = _this$props.backLabelText,
        backLabelTextStyle = _this$props.backLabelTextStyle,
        onPressBack = _this$props.onPressBack,
        titleContainer = _this$props.titleContainer,
        title = _this$props.title,
        titleStyle = _this$props.titleStyle,
        forwardLabel = _this$props.forwardLabel,
        forwardLabelText = _this$props.forwardLabelText,
        forwardLabelTextStyle = _this$props.forwardLabelTextStyle,
        onPressForward = _this$props.onPressForward;
    var fontSize = variables.hyFontSizeL;
    var fontColor = variables.hyGrayBase;

    if (index === 0) {
      return /*#__PURE__*/React.createElement(TouchableOpacity, {
        testID: "back",
        style: {
          flexDirection: 'row',
          alignItems: 'center',
          paddingVertical: variables.hyVSpacingXL,
          paddingHorizontal: variables.hyHSpacingXL
        },
        onPress: function onPress() {
          onPressBack && onPressBack();
        }
      }, /*#__PURE__*/React.isValidElement(backLabel) ? backLabel : /*#__PURE__*/React.createElement(View, {
        style: {
          flexDirection: 'row',
          minWidth: 30,
          alignItems: 'center'
        }
      }, /*#__PURE__*/React.isValidElement(backLabelIcon) ? backLabelIcon : /*#__PURE__*/React.createElement(Icon, {
        source: require("../../common/images/icons/angle-left.png"),
        size: fontSize,
        tintColor: fontColor
      }), /*#__PURE__*/React.createElement(Text, {
        style: [{
          fontSize: fontSize,
          color: fontColor
        }, backLabelTextStyle]
      }, backLabelText)));
    }

    if (index === 1) {
      return /*#__PURE__*/React.createElement(View, {
        style: {
          paddingVertical: variables.hyVSpacingXL,
          paddingHorizontal: variables.hyHSpacingXL
        }
      }, /*#__PURE__*/React.isValidElement(titleContainer) ? titleContainer : /*#__PURE__*/React.createElement(Text, {
        style: [{
          textAlign: 'center',
          fontSize: fontSize,
          color: fontColor
        }, titleStyle]
      }, title));
    }

    if (index === 2) {
      return /*#__PURE__*/React.createElement(TouchableOpacity, {
        testID: "forward",
        style: {
          flexDirection: 'row',
          justifyContent: 'flex-end',
          alignItems: 'center',
          paddingVertical: variables.hyVSpacingXL,
          paddingHorizontal: variables.hyHSpacingXL
        },
        onPress: function onPress() {
          onPressForward && onPressForward();
        }
      }, /*#__PURE__*/React.isValidElement(forwardLabel) ? forwardLabel : /*#__PURE__*/React.createElement(Text, {
        style: [{
          fontSize: fontSize,
          color: fontColor
        }, forwardLabelTextStyle]
      }, forwardLabelText));
    }
  };

  _proto.render = function render() {
    var _this = this;

    var _this$props2 = this.props,
        testID = _this$props2.testID,
        style = _this$props2.style,
        proportion = _this$props2.proportion,
        renderItem = _this$props2.renderItem;
    return /*#__PURE__*/React.createElement(View, {
      testID: testID,
      style: [navigationBarStyles.wrapper, style]
    }, proportion.map(function (item, index) {
      return /*#__PURE__*/React.createElement(View, {
        key: index,
        style: {
          flex: item
        }
      }, renderItem ? renderItem(index) : _this.renderItem(index));
    }));
  };

  return NavigationBar;
}(Component);
NavigationBar.defaultProps = {
  style: {},
  proportion: [1, 2, 1],
  title: '标题',
  titleStyle: {},
  backLabelText: '返回',
  onPressBack: null,
  forwardLabelText: null,
  onPressForward: null,
  renderItem: null
};