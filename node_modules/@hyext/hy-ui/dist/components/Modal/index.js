function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

import React from 'react';
import { View, TouchableOpacity, Animated, Dimensions, ScrollView } from 'react-native';
import { TopviewGetInstance } from '../Topview';
import { FadeAnimated } from '../../common/animations';
import modalStyles from './styles';
import variables from '../../common/styles/variables';
export { modalStyles };
var window = Dimensions.get('window');
export var Modal = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Modal, _React$Component);

  function Modal(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;

    _this.handlePressBackdrop = function () {
      if (_this.props.cancelable) {
        _this.close('backdrop')["catch"](function (e) {
          return null;
        });
      }
    };

    _this.handleLayout = function (e) {
      var _e$nativeEvent$layout = e.nativeEvent.layout,
          x = _e$nativeEvent$layout.x,
          y = _e$nativeEvent$layout.y,
          width = _e$nativeEvent$layout.width,
          height = _e$nativeEvent$layout.height;
      var _this$props = _this.props,
          animatedTranslateX = _this$props.animatedTranslateX,
          animatedTranslateY = _this$props.animatedTranslateY;
      var translateX = null;
      var translateY = null;
      var ret = [];

      if (animatedTranslateX != null) {
        translateX = animatedTranslateX - width / 2 - x;
        ret.push({
          key: 'translateX',
          value: translateX
        });
      }

      if (animatedTranslateY != null) {
        translateY = animatedTranslateY - height / 2 - y;
        ret.push({
          key: 'translateY',
          value: translateY
        });
      }

      _this.animated.reset(ret);
    };

    _this.state = {};
    _this.modalState = {
      topviewId: null,
      opening: false,
      closing: false
    };

    _this.init(props, true);

    return _this;
  }

  var _proto = Modal.prototype;

  _proto.init = function init(props, syncTag) {
    var tmpState = {
      containerStyle: props.containerStyle,
      style: props.style
    };
    this.animated = new FadeAnimated({});

    if (syncTag) {
      this.state = _objectSpread(_objectSpread({}, this.state), tmpState);
    } else {
      this.setState(_objectSpread(_objectSpread({}, this.state), tmpState));
    }
  };

  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    if (nextProps.animatedTranslateX !== this.props.animatedTranslateX || nextProps.animatedTranslateY !== this.props.animatedTranslateY || nextProps.containerStyle !== this.props.containerStyle || nextProps.style !== this.props.style) {
      this.init(nextProps, false);
    }
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.close()["catch"](function (e) {
      return null;
    });
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
    if (this.modalState.topviewId && TopviewGetInstance()) {
      TopviewGetInstance().replace(this.getContent(), this.modalState.topviewId);
    }
  };

  _proto.getContent = function getContent(inner) {
    var styles = modalStyles;
    var tmp = inner == null ? this.props.children : inner;
    var animatedState = this.animated ? this.animated.getState() : {};
    var _this$props2 = this.props,
        offsetY = _this$props2.offsetY,
        offsetX = _this$props2.offsetX,
        viewportHeight = _this$props2.viewportHeight,
        viewportWidth = _this$props2.viewportWidth,
        backdropColor = _this$props2.backdropColor; // const contentWidth = viewportWidth - offsetX
    // const contentHeight = viewportHeight - offsetY

    var innerView = /*#__PURE__*/React.createElement(TouchableOpacity, {
      style: [styles.container, this.state.containerStyle, {
        // minHeight: contentHeight,
        // minWidth: contentWidth,
        // backgroundColor: 'rgba(1, 2, 110, 0.5)',
        backgroundColor: 'rgba(0, 0, 0, 0)'
      }],
      activeOpacity: 1,
      onPress: this.handlePressBackdrop
    }, /*#__PURE__*/React.createElement(Animated.View, {
      style: [styles.content, {
        transform: [{
          translateX: animatedState.translateX
        }, {
          translateY: animatedState.translateY
        }],
        opacity: animatedState.opacity
      }, this.state.style],
      onLayout: this.handleLayout
    }, /*#__PURE__*/React.createElement(Animated.View, {
      style: [{
        transform: [{
          scale: animatedState.scale
        }]
      }]
    }, /*#__PURE__*/React.createElement(TouchableOpacity, {
      activeOpacity: 1
    }, tmp || null))));
    return /*#__PURE__*/React.createElement(View, {
      style: {
        position: 'absolute',
        top: offsetY,
        left: offsetX,
        right: 0,
        bottom: 0,
        flexDirection: 'column',
        backgroundColor: backdropColor
      }
    }, this.renderInnerView(innerView));
  };

  _proto.renderInnerView = function renderInnerView(innerView) {
    var style = {
      flex: 1
    };

    if (this.props.scrollable) {
      return /*#__PURE__*/React.createElement(ScrollView, {
        style: style
      }, innerView);
    } else {
      return /*#__PURE__*/React.createElement(View, {
        style: style
      }, innerView);
    }
  };

  _proto.close = function close() {
    var _this$props3,
        _this2 = this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (this.modalState.closing || this.modalState.topviewId == null) {
      // '重复关闭'
      return Promise.resolve();
    }

    this.modalState.closing = true;
    this.props.onClose && (_this$props3 = this.props).onClose.apply(_this$props3, args);
    return this.animated.toOut().then(function () {
      return TopviewGetInstance().remove(_this2.modalState.topviewId);
    }).then(function () {
      var _this2$props;

      var id = _this2.modalState.topviewId;
      _this2.modalState.closing = false;
      _this2.modalState.topviewId = null;
      _this2.props.onClosed && (_this2$props = _this2.props).onClosed.apply(_this2$props, args);
      return id;
    })["catch"](function (e) {
      console.log(e);
    });
  };

  _proto.open = function open(c, args) {
    var _this3 = this;

    if (!TopviewGetInstance()) {
      var msg = 'Topview instance is not existed.';
      console.log(msg);
      return Promise.reject(msg);
    }

    if (this.modalState.opening || this.modalState.topviewId) {
      // '不能重复打开'
      return Promise.resolve();
    }

    this.modalState.opening = true;
    this.props.onOpen && this.props.onOpen(_objectSpread({}, this.modalState));
    return TopviewGetInstance().add(this.getContent(c), args).then(function (id) {
      _this3.modalState.topviewId = id;
      return _this3.animated.toIn().then(function () {
        _this3.modalState.opening = false;
        _this3.props.onOpened && _this3.props.onOpened(_objectSpread({}, _this3.modalState));
        return id;
      });
    });
  };

  _proto.render = function render() {
    return null;
  };

  return Modal;
}(React.Component);
Modal.defaultProps = {
  cancelable: true,
  scrollable: false,
  backdropColor: variables.hyFillBackdrop,
  viewportWidth: window.width,
  viewportHeight: window.height,
  offsetX: 0,
  offsetY: 0,
  animatedTranslateX: null,
  animatedTranslateY: null,
  containerStyle: {},
  style: {},
  onOpen: null,
  onOpened: null,
  onClose: null,
  onClosed: null
};