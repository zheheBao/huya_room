function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

import React from 'react';
import { Scrollpicker } from '../Scrollpicker';
import { range, convert2Digit, convert2Number } from '../../common/utils';
export var Timepicker = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Timepicker, _React$Component);

  function Timepicker(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;

    _this.handleChange = function (columnIndex, rowIndex) {
      var _this$state = _this.state,
          list = _this$state.list,
          value = _this$state.value;
      var tmpValue = value.concat();
      tmpValue.splice(columnIndex, 1, rowIndex);
      var ret = tmpValue.map(function (valueItem, valueIndex) {
        valueItem = convert2Number(valueItem);
        return list[valueIndex][valueItem].value;
      });

      _this.setState({
        value: ret
      });

      _this.props.onChange && _this.props.onChange(ret.join(':'));
    };

    _this.state = _objectSpread({}, _this.init(props));
    return _this;
  }

  var _proto = Timepicker.prototype;

  _proto.init = function init(props) {
    var hourStep = props.hourStep,
        minuteStep = props.minuteStep,
        secondStep = props.secondStep,
        value = props.value,
        format = props.format;
    var hourSum = 24;
    var minuteSum = 60;
    var secondSum = 60;
    var checkItem = [];
    format.split(':').forEach(function (item) {
      if (item === 'hh') {
        checkItem[0] = true;
      } else if (item === 'mm') {
        checkItem[1] = true;
      } else if (item === 'ss') {
        checkItem[2] = true;
      }
    });
    var hasHour = checkItem[0],
        hasMin = checkItem[1],
        hasSec = checkItem[2];

    if (hourSum % hourStep !== 0) {
      throw TypeError("hourStep \u53C2\u6570 " + hourStep + " \u65E0\u6548");
    }

    if (minuteSum % minuteStep !== 0) {
      throw TypeError("minuteStep \u53C2\u6570 " + minuteStep + " \u65E0\u6548");
    }

    if (secondSum % secondStep !== 0) {
      throw TypeError("secondStep \u53C2\u6570 " + secondStep + " \u65E0\u6548");
    }

    var list = [];
    var valueArray = [];
    var valueRet = [];
    var formatItemCount = 0;

    function addItem(data) {
      list.push(data);
      valueRet.push(0);
      formatItemCount += 1;
    }

    if (hasHour) {
      var hours = range(hourSum / hourStep).map(function (item) {
        item = convert2Digit(item * hourStep);
        return {
          label: item + " \u65F6",
          value: item
        };
      });
      addItem(hours);
    }

    if (hasMin) {
      var minutes = range(minuteSum / minuteStep).map(function (item) {
        item = convert2Digit(item * minuteStep);
        return {
          label: item + " \u5206",
          value: item
        };
      });
      addItem(minutes);
    }

    if (hasSec) {
      var seconds = range(secondSum / secondStep).map(function (item) {
        item = convert2Digit(item * secondStep);
        return {
          label: item + " \u79D2",
          value: item
        };
      });
      addItem(seconds);
    }

    if (value && typeof value === 'string') {
      valueArray = value.split(':');
    }

    if (valueArray && valueArray.length && valueArray.length !== formatItemCount) {
      throw TypeError("value \u53C2\u6570 " + value + " \u65E0\u6548");
    }

    if (valueArray && valueArray.length) {
      valueArray.forEach(function (valueItem, valueIndex) {
        var tag = list[valueIndex].some(function (targetItem, targetIndex) {
          if (targetItem.value === valueItem) {
            valueRet[valueIndex] = targetIndex;
            return true;
          } else {
            return false;
          }
        });

        if (!tag) {
          throw TypeError("value \u53C2\u6570" + (valueIndex === 0 ? '时' : valueIndex === 1 ? '分' : '秒') + "\u5B57\u6BB5 " + valueItem + " \u65E0\u6548");
        }
      });
    }

    var data = {
      value: valueRet,
      list: list
    };
    return data;
  };

  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    if (nextProps.value !== this.props.value) {
      this.setState(_objectSpread(_objectSpread({}, this.state), this.init(nextProps)));
    }
  };

  _proto.render = function render() {
    var _this$state2 = this.state,
        value = _this$state2.value,
        list = _this$state2.list;
    return /*#__PURE__*/React.createElement(Scrollpicker, _extends({}, this.props, {
      value: value,
      list: list,
      onChange: this.handleChange
    }));
  };

  return Timepicker;
}(React.Component);
Timepicker.defaultProps = _objectSpread(_objectSpread({}, Scrollpicker.defaultProps), {}, {
  hourStep: 1,
  minuteStep: 1,
  secondStep: 1,
  format: 'hh:mm:ss'
});