function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import { View, TextInput, StyleSheet, TouchableOpacity } from 'react-native';
import inputStyles from './styles';
import variables from '../../common/styles/variables';
import { isWeb, isIOS } from '../../common/utils/env';
import { Icon } from '../Icon';

if (isWeb) {
  // @ts-ignore
  inputStyles.inputStyle.outlineWidth = 0;
}

var styles = StyleSheet.create(inputStyles);
export var Input = /*#__PURE__*/function (_Component) {
  _inheritsLoose(Input, _Component);

  function Input(props) {
    var _this;

    _this = _Component.call(this, props) || this;
    _this.delayIsEditing = null;

    _this.handleChange = function (value) {
      _this.props.onChange && _this.props.onChange(value);
    };

    _this.handleBlur = function (e) {
      if (_this.props.onBlur) {
        _this.props.onBlur(e);
      }
    };

    _this.handleFocus = function (e) {
      if (_this.props.onFocus) {
        _this.props.onFocus(e);
      }
    };

    _this.delayTaskMemoize = function (duration) {
      var timeoutId;
      return {
        cancel: function cancel() {
          clearTimeout(timeoutId);
        },
        delay: function delay(task) {
          clearTimeout(timeoutId);
          timeoutId = setTimeout(function () {
            task();
          }, duration || 0);
        }
      };
    };

    _this.renderiOS = function () {
      var tmpProps = _this.modProps(_this.props);

      return /*#__PURE__*/React.createElement(View, {
        style: [styles.container, _this.props.style, {
          flexDirection: 'column',
          justifyContent: 'center'
        }]
      }, /*#__PURE__*/React.createElement(TextInput, _extends({}, tmpProps, {
        style: [styles.inputStyle, _this.props.inputStyle],
        onChange: function onChange() {
          return;
        },
        onChangeText: _this.handleChange,
        onFocus: _this.handleFocus.bind(_assertThisInitialized(_this)),
        onBlur: _this.handleBlur.bind(_assertThisInitialized(_this))
      })));
    };

    _this.renderAndroidAndWeb = function () {
      var androidClearButtonMode = _this.props.clearButtonMode && _this.props.clearButtonMode !== 'never';
      var showDelIcon = androidClearButtonMode && _this.props.value && _this.state.isEditing;

      var tmpProps = _this.modProps(_this.props);

      var textAlignStyle = isWeb && _this.props.textAlign ? {
        textAlign: _this.props.textAlign
      } : null; // web textAlign polyfill

      return /*#__PURE__*/React.createElement(View, {
        style: [styles.container, _this.props.style, {
          flexDirection: 'row',
          alignItems: 'center'
        }]
      }, /*#__PURE__*/React.createElement(TextInput, _extends({}, tmpProps, {
        clearButtonMode: "never",
        style: [styles.inputStyle, {
          flex: 1
        }, _this.props.inputStyle, textAlignStyle],
        onChange: function onChange() {
          return;
        },
        onChangeText: _this.handleChange,
        onFocus: function onFocus(e) {
          _this.handleFocus(e);

          _this.delayIsEditing.cancel();

          _this.setState({
            isEditing: true
          });
        },
        onBlur: function onBlur(e) {
          _this.handleBlur(e);

          _this.delayIsEditing.delay(function () {
            _this.setState({
              isEditing: false
            });
          });
        },
        underlineColorAndroid: "transparent"
      })), showDelIcon ? /*#__PURE__*/React.createElement(TouchableOpacity, {
        onPress: function onPress() {
          // console.log('press delete icon')
          _this.handleChange('');
        }
      }, /*#__PURE__*/React.createElement(Icon, {
        source: require("../../common/images/icons/times-circle.png"),
        size: 15,
        tintColor: variables.hyGrayLighter
      })) : null);
    };

    _this.state = {
      isEditing: false
    };
    _this.delayIsEditing = _this.delayTaskMemoize(3000);
    return _this;
  }

  var _proto = Input.prototype;

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.delayIsEditing.cancel();
  };

  _proto.modProps = function modProps(props) {
    var tmpProps = _objectSpread({}, props);

    if (isWeb) {
      // web 平台不支持该属性
      delete tmpProps.textAlign;
    }

    delete tmpProps.style;
    delete tmpProps.inputStyle;
    return tmpProps;
  };

  _proto.render = function render() {
    if (isIOS) {
      return this.renderiOS();
    } else {
      return this.renderAndroidAndWeb();
    }
  };

  return Input;
}(Component);
Input.displayName = 'Input';
Input.defaultProps = {
  onChange: null,
  textAlign: 'left',
  placeholder: '请输入',
  placeholderTextColor: variables.hyGrayLighter,
  autoFocus: false,
  autoCorrect: true,
  keyboardType: 'default',
  maxLength: null,
  editable: true,
  clearButtonMode: 'while-editing',
  value: ''
};