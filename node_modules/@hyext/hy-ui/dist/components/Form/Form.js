function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import { View, StyleSheet } from 'react-native';
import formStyles from './styles';
import { FormItem } from './FormItem';
import { Validator } from "../../common/utils/validator";
var styles = StyleSheet.create(formStyles);
export var Form = /*#__PURE__*/function (_Component) {
  _inheritsLoose(Form, _Component);

  function Form(props) {
    var _this;

    _this = _Component.call(this, props) || this;
    _this.state = {
      validateMapping: _this.init(props)
    };
    return _this;
  }

  var _proto = Form.prototype;

  _proto.validate = function validate() {
    var validateMapping = this.state.validateMapping;
    var data = this.props.data;
    var validator = new Validator(validateMapping, data);
    var result = validator.validate();
    this.setState({
      validateMapping: _objectSpread({}, validator.validateMapping)
    });
    return result;
  };

  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var props = this.props;
    var oldChild = props.children;
    var newChild = nextProps.children;
    var needUpdate = false;

    if (Array.isArray(oldChild) && Array.isArray(newChild)) {
      if (oldChild.length !== newChild.length) {
        needUpdate = true;
      }
    } else if (oldChild !== newChild) {
      needUpdate = true;
    }

    if (needUpdate) {
      this.setState({
        validateMapping: this.init(nextProps)
      });
    }
  };

  _proto.init = function init(props) {
    var _this2 = this;

    var children = props.children;
    var validateMapping = {};
    React.Children.forEach(children, function (child) {
      var map = _this2.getValidateMap(child.props);

      if (map) {
        validateMapping[map.name] = map;
      }
    });
    return validateMapping;
  };

  _proto.getValidateMap = function getValidateMap(formItemProps) {
    var validate = formItemProps.validate,
        name = formItemProps.name,
        error = formItemProps.error,
        __valid = formItemProps.__valid;

    if (!validate) {
      return;
    }

    if (name !== void 0 && !(typeof name === 'string' && name)) {
      throw new TypeError('name参数类型必须是非空白字符串');
    }

    return {
      name: name,
      validate: validate,
      error: error,
      result: __valid
    };
  };

  _proto.renderChildren = function renderChildren() {
    var children = this.props.children;
    var validateMapping = this.state.validateMapping;
    return React.Children.map(children, function (element) {
      // 处理FormItem组件
      if (element.type.name === 'FormItem') {
        var conf = validateMapping[element.props.name];
        return /*#__PURE__*/React.cloneElement(element, {
          __valid: conf && conf.result !== void 0 ? conf.result : true,
          __firstErrorIndex: conf && conf.firstErrorIndex
        });
      }

      return /*#__PURE__*/React.cloneElement(element);
    });
  };

  _proto.render = function render() {
    return /*#__PURE__*/React.createElement(View, {
      testID: this.props.testID,
      style: [styles.form, this.props.style]
    }, this.renderChildren());
  };

  return Form;
}(Component);
Form.displayName = 'Form';
Form.defaultProps = {
  style: {}
};
Form.Item = FormItem;