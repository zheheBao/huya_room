function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

import React from 'react';
import { View, Text, TouchableOpacity, Dimensions } from 'react-native';
import { SlideModal } from '../SlideModal';
import styleUtils from '../../common/styles/utils';
import bottomModalStyles from './styles';
var window = Dimensions.get('window');
export var BottomModal = /*#__PURE__*/function (_SlideModal) {
  _inheritsLoose(BottomModal, _SlideModal);

  function BottomModal(props) {
    return _SlideModal.call(this, props) || this;
  }

  var _proto = BottomModal.prototype;

  _proto.getHeader = function getHeader() {
    var _this = this;

    var styles = bottomModalStyles;
    var _this$props = this.props,
        titleContainer = _this$props.titleContainer,
        title = _this$props.title,
        titleStyle = _this$props.titleStyle,
        rightLabel = _this$props.rightLabel,
        rightLabelText = _this$props.rightLabelText,
        rightLabelTextStyle = _this$props.rightLabelTextStyle,
        rightCallback = _this$props.rightCallback,
        leftLabel = _this$props.leftLabel,
        leftLabelText = _this$props.leftLabelText,
        leftLabelTextStyle = _this$props.leftLabelTextStyle,
        leftCallback = _this$props.leftCallback;
    var rightEl = null;

    if (rightLabel || rightLabelText) {
      rightEl = /*#__PURE__*/React.createElement(TouchableOpacity, {
        testID: "right",
        activeOpacity: 1,
        onPress: function onPress() {
          _this.close().then(function () {
            rightCallback && rightCallback();
          });
        }
      }, /*#__PURE__*/React.isValidElement(rightLabel) ? rightLabel : /*#__PURE__*/React.createElement(Text, {
        style: [styles.operator, styleUtils.textRight, styleUtils.textPrimaryDark, styleUtils.textBold, rightLabelTextStyle],
        numberOfLines: 1
      }, rightLabelText));
    }

    var leftEl = null;

    if (leftLabel || leftLabelText) {
      leftEl = /*#__PURE__*/React.createElement(TouchableOpacity, {
        testID: "left",
        activeOpacity: 1,
        onPress: function onPress() {
          _this.close().then(function () {
            leftCallback && leftCallback();
          });
        }
      }, /*#__PURE__*/React.isValidElement(leftLabel) ? leftLabel : /*#__PURE__*/React.createElement(Text, {
        style: [styles.operator, styleUtils.textLeft, leftLabelTextStyle],
        numberOfLines: 1
      }, leftLabelText));
    }

    var titleContainerEl = null;

    if (titleContainer || title) {
      titleContainerEl = /*#__PURE__*/React.isValidElement(titleContainer) ? titleContainer : /*#__PURE__*/React.createElement(Text, {
        style: [styles.title, titleStyle]
      }, title);
    }

    return /*#__PURE__*/React.createElement(View, {
      style: styles.header
    }, /*#__PURE__*/React.createElement(View, {
      style: styles.colSide
    }, leftEl), /*#__PURE__*/React.createElement(View, {
      style: styles.colMiddle
    }, titleContainerEl), /*#__PURE__*/React.createElement(View, {
      style: styles.colSide
    }, rightEl));
  };

  _proto.getBody = function getBody() {
    return this.props.children;
  };

  _proto.getContent = function getContent() {
    var styles = bottomModalStyles;
    var inner = /*#__PURE__*/React.createElement(View, {
      testID: this.props.testID,
      style: [styles.container, {
        width: this.props.viewportWidth
      }, this.props.style]
    }, this.getHeader(), this.getBody());
    return SlideModal.prototype.getContent.call(this, inner);
  };

  return BottomModal;
}(SlideModal);
BottomModal.defaultProps = _objectSpread(_objectSpread({}, SlideModal.defaultProps), {}, {
  cancelable: true,
  viewportWidth: window.width,
  titleContainer: null,
  title: '标题',
  titleStyle: {},
  rightLabel: null,
  rightLabelText: '完成',
  rightLabelTextStyle: {},
  rightCallback: null,
  leftLabel: null,
  leftLabelText: '取消',
  leftLabelTextStyle: {},
  leftCallback: null
});