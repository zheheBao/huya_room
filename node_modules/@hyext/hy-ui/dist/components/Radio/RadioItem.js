function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import { View, Text, TouchableOpacity, Animated } from 'react-native';
import styles from './styles';
import variables from '../../common/styles/variables';
import styleUtils from '../../common/styles/utils';
import { FadeAnimated } from '../../common/animations';

var RadioItem = /*#__PURE__*/function (_Component) {
  _inheritsLoose(RadioItem, _Component);

  function RadioItem(props) {
    var _this;

    _this = _Component.call(this, props) || this;

    _this.handlePress = function () {
      if (_this.props.disabled) {
        return;
      }

      var value = _this.props.value;
      var checked = _this.props.checked; // 已经选中了就直接返回

      if (checked === true) {
        return;
      }

      _this.animated && _this.animated.toIn();
      _this.props.onChange && _this.props.onChange(value);
    };

    _this.renderIcon = function (checked, iconPosition) {
      var iconContainerStyle = {
        marginRight: iconPosition === 'left' ? 6 : null
      };
      var iconView = checked ? _this.props.checkedIcon : _this.props.uncheckedIcon;
      var animatedStyle = {};

      if (variables.radioEnableAnimated) {
        animatedStyle = {
          transform: [{
            scale: _this.animated.getState().scale
          }],
          opacity: _this.animated.getState().opacity
        };
      }

      return /*#__PURE__*/React.createElement(View, {
        style: iconContainerStyle
      }, /*#__PURE__*/React.createElement(Animated.View, {
        style: animatedStyle
      }, iconView));
    };

    _this.renderLabel = function (checked) {
      return /*#__PURE__*/React.createElement(Text, {
        style: [styles.radioItemLabel, checked ? [styleUtils.textPrimaryDark, styleUtils.textBold] : null]
      }, _this.props.label);
    };

    if (variables.radioEnableAnimated) {
      _this.animated = new FadeAnimated({});
    }

    return _this;
  }

  var _proto = RadioItem.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.animated && this.animated.toIn();
  };

  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    if (nextProps.checked !== this.props.checked) {
      this.animated && this.animated.toIn();
    }
  };

  _proto.render = function render() {
    var _this$props = this.props,
        testID = _this$props.testID,
        disabled = _this$props.disabled,
        checked = _this$props.checked,
        iconPosition = _this$props.iconPosition,
        style = _this$props.style,
        renderItem = _this$props.renderItem;
    return /*#__PURE__*/React.createElement(TouchableOpacity, {
      testID: testID,
      style: [style, {
        opacity: disabled ? variables.hyOpacity : 1
      }],
      activeOpacity: variables.hyOpacity,
      onPress: this.handlePress
    }, typeof renderItem === 'function' ? renderItem(checked) : /*#__PURE__*/React.createElement(View, {
      style: [styles.radioItemContainer, this.props.iconPosition === 'right' ? {
        flexDirection: 'row-reverse',
        justifyContent: 'space-between'
      } : null]
    }, this.renderIcon(checked, iconPosition), this.renderLabel(checked)));
  };

  return RadioItem;
}(Component);

RadioItem.displayName = 'RadioItem';
RadioItem.defaultProps = {
  label: '选项',
  value: null,
  disabled: false,
  checked: false,
  iconPosition: 'right'
};
export { RadioItem as default };