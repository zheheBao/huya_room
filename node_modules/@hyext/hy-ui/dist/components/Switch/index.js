function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import variables from '../../common/styles/variables';
import switchStyles from './styles';
import { StyleSheet, Animated, Easing, PanResponder, Platform } from 'react-native';
var styles = StyleSheet.create(switchStyles);
var SCALE = 6 / 5;
var borderColor = '#c5c5c5';
var defaultShadowColor = variables.hyGray;
var disabledShadowColor = variables.hyGrayLightest;
var switchWidth = 50;
var switchHeight = 30;
var rockerSizeMap = {
  'lg': 27,
  'sm': 20
};
export var Switch = /*#__PURE__*/function (_Component) {
  _inheritsLoose(Switch, _Component);

  function Switch(props) {
    var _this;

    _this = _Component.call(this, props) || this;

    _this.onPanResponderGrant = function () {
      var _this$props = _this.props,
          disabled = _this$props.disabled,
          rockerSize = _this$props.rockerSize;
      if (disabled) return;

      _this.setState({
        toggleable: true
      });

      _this.animateHandler(rockerSizeMap[rockerSize] * SCALE);
    };

    _this.onPanResponderMove = function (evt, gestureState) {
      var value = _this.state.value;
      var disabled = _this.props.disabled;
      if (disabled) return;

      _this.setState({
        toggleable: value ? gestureState.dx < 10 : gestureState.dx > -10
      });
    };

    _this.onPanResponderRelease = function () {
      var toggleable = _this.state.toggleable;
      var _this$props2 = _this.props,
          disabled = _this$props2.disabled,
          onChange = _this$props2.onChange,
          rockerSize = _this$props2.rockerSize;
      if (disabled) return;

      if (toggleable) {
        _this.toggleSwitch(true, onChange);
      } else {
        _this.animateHandler(rockerSizeMap[rockerSize]);
      }
    };

    _this.toggleSwitch = function (result, callback) {
      var value = _this.state.value;

      _this.toggleSwitchToValue(result, !value, callback);
    };

    _this.toggleSwitchToValue = function (result, toValue, callback) {
      var switchAnimation = _this.state.switchAnimation;
      var rockerSize = _this.props.rockerSize;

      _this.animateHandler(rockerSizeMap[rockerSize]);

      if (result) {
        _this.animateSwitch(toValue, function () {
          _this.setState({
            value: toValue,
            alignItems: toValue ? 'flex-end' : 'flex-start'
          }, function () {
            callback && callback(toValue);
          });

          switchAnimation.setValue(toValue ? -1 : 1);
        });
      }
    };

    _this.animateSwitch = function (value, callback) {
      if (callback === void 0) {
        callback = function callback() {
          return null;
        };
      }

      var switchAnimation = _this.state.switchAnimation;
      Animated.timing(switchAnimation, {
        toValue: value ? _this.offset : -_this.offset,
        duration: 200,
        easing: Easing.linear
      }).start(callback);
    };

    _this.animateHandler = function (value, callback) {
      if (callback === void 0) {
        callback = function callback() {
          return null;
        };
      }

      var handlerAnimation = _this.state.handlerAnimation;
      Animated.timing(handlerAnimation, {
        toValue: value,
        duration: 200,
        easing: Easing.linear
      }).start(callback);
    };

    _this.circlePosition = function (value) {
      var modifier = value ? 1 : -1;
      var position = modifier * -1;
      return position;
    };

    _this.getContainBaseStyle = function () {
      var _this$state = _this.state,
          switchAnimation = _this$state.switchAnimation,
          alignItems = _this$state.alignItems,
          value = _this$state.value;
      var activeColor = _this.props.activeColor;
      var interpolatedBackgroundColor = switchAnimation.interpolate({
        inputRange: value ? [-_this.offset, -1] : [1, _this.offset],
        outputRange: ['#fff', activeColor],
        extrapolate: 'clamp'
      });
      return {
        width: switchWidth,
        height: switchHeight,
        alignItems: alignItems,
        borderRadius: switchHeight / 2,
        borderWidth: StyleSheet.hairlineWidth,
        borderColor: borderColor,
        backgroundColor: interpolatedBackgroundColor
      };
    };

    _this.getRockerBaseStyle = function () {
      var _this$state2 = _this.state,
          switchAnimation = _this$state2.switchAnimation,
          handlerAnimation = _this$state2.handlerAnimation,
          value = _this$state2.value;
      var _this$props3 = _this.props,
          rockerSize = _this$props3.rockerSize,
          disabled = _this$props3.disabled;
      var interpolatedCircleColor = switchAnimation.interpolate({
        inputRange: value ? [-_this.offset, -1] : [1, _this.offset],
        // outputRange: [rockerColor, rockerActiveColor],
        outputRange: ['#fff', '#fff'],
        extrapolate: 'clamp'
      });
      var interpolatedTranslateX = switchAnimation.interpolate({
        inputRange: value ? [-_this.offset, -1] : [1, _this.offset],
        outputRange: value ? [-_this.offset, _this.circlePosition(value)] : [_this.circlePosition(value), _this.offset],
        extrapolate: 'clamp'
      });
      return {
        backgroundColor: interpolatedCircleColor,
        width: handlerAnimation,
        height: rockerSizeMap[rockerSize],
        marginHorizontal: (switchHeight - rockerSizeMap[rockerSize]) / 2 - 1,
        borderRadius: switchHeight / 2,
        shadowColor: disabled ? disabledShadowColor : defaultShadowColor,
        shadowOffset: {
          h: 2,
          w: 2
        },
        shadowRadius: 2,
        shadowOpacity: 0.8,
        transform: [{
          translateX: interpolatedTranslateX
        }],
        borderColor: disabled ? disabledShadowColor : borderColor
      };
    };

    var _rockerSize = props.rockerSize,
        _value = props.value,
        _disabled = props.disabled;
    _this.state = {
      value: _value,
      toggleable: true,
      alignItems: _value ? 'flex-end' : 'flex-start',
      handlerAnimation: new Animated.Value(rockerSizeMap[_rockerSize]),
      switchAnimation: new Animated.Value(_value ? -1 : 1)
    };
    _this.offset = switchWidth - switchHeight + 1;
    return _this;
  }

  var _proto = Switch.prototype;

  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    if (nextProps.value === this.state.value) {
      return;
    }

    if (typeof nextProps.value !== 'undefined' && nextProps.value !== this.props.value) {
      this.toggleSwitchToValue(true, nextProps.value);
    }
  };

  _proto.componentWillMount = function componentWillMount() {
    this.panResponder = PanResponder.create({
      onStartShouldSetPanResponder: function onStartShouldSetPanResponder() {
        return true;
      },
      onStartShouldSetPanResponderCapture: function onStartShouldSetPanResponderCapture() {
        return true;
      },
      onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder() {
        return true;
      },
      onMoveShouldSetPanResponderCapture: function onMoveShouldSetPanResponderCapture() {
        return true;
      },
      onPanResponderTerminationRequest: function onPanResponderTerminationRequest() {
        return true;
      },
      onPanResponderGrant: this.onPanResponderGrant,
      onPanResponderMove: this.onPanResponderMove,
      onPanResponderRelease: this.onPanResponderRelease
    });
  };

  _proto.render = function render() {
    var disabled = this.props.disabled;
    var elevation = disabled ? 1 : 5;
    var borderWidth = Platform.OS === 'android' || Platform.OS === 'web' ? StyleSheet.hairlineWidth : 0;
    return /*#__PURE__*/React.createElement(Animated.View, _extends({
      testID: this.props.testID
    }, this.panResponder.panHandlers, {
      style: [styles.container, this.getContainBaseStyle(), this.props.style]
    }), /*#__PURE__*/React.createElement(Animated.View, {
      style: [this.getRockerBaseStyle(), {
        borderWidth: borderWidth
      }, Platform.OS === 'android' && Platform.Version >= 21 ? {
        elevation: elevation
      } : {}]
    }));
  };

  return Switch;
}(Component);
Switch.defaultProps = {
  style: {},
  value: false,
  disabled: false,
  rockerSize: 'lg',
  activeColor: variables.hyBrandPrimaryDark
};