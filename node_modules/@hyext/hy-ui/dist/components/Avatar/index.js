function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

import React, { Component } from "react";
import styles from "./styles";
import { FullImage } from "../Image/index";
export var Avatar = /*#__PURE__*/function (_Component) {
  _inheritsLoose(Avatar, _Component);

  function Avatar() {
    return _Component.apply(this, arguments) || this;
  }

  var _proto = Avatar.prototype;

  _proto.getStyle = function getStyle() {
    var _this$props = this.props,
        size = _this$props.size,
        avatarStyle = _this$props.avatarStyle,
        border = _this$props.border,
        borderColor = _this$props.borderColor,
        borderWidth = _this$props.borderWidth,
        circle = _this$props.circle;
    var sizeStyle = styles["size-" + size];

    var wrapperStyle = _objectSpread(_objectSpread({}, styles.wrapper), sizeStyle);

    var imageStyle = _objectSpread({}, sizeStyle);

    if (border) {
      wrapperStyle.borderColor = borderColor !== '' ? borderColor : styles.borderColor;
      wrapperStyle.borderWidth = borderWidth > 0 ? borderWidth : styles.borderWidth;
    }

    if (circle) {
      wrapperStyle.borderRadius = styles["radius-" + size];
    }

    if (avatarStyle !== null) {
      wrapperStyle = _objectSpread(_objectSpread({}, wrapperStyle), avatarStyle);

      if (avatarStyle.width !== void 0 && avatarStyle.height !== void 0) {
        imageStyle = _objectSpread(_objectSpread({}, imageStyle), {}, {
          width: avatarStyle.width,
          height: avatarStyle.height
        }); // 跟wrapper的尺寸一致
      }
    }

    return {
      imageStyle: imageStyle,
      wrapperStyle: wrapperStyle
    };
  };

  _proto.render = function render() {
    var _this$getStyle = this.getStyle(),
        wrapperStyle = _this$getStyle.wrapperStyle,
        imageStyle = _this$getStyle.imageStyle;

    return /*#__PURE__*/React.createElement(FullImage, _extends({}, this.props, {
      wrapperStyle: wrapperStyle,
      imageStyle: imageStyle
    }));
  };

  return Avatar;
}(Component);
Avatar.defaultProps = _objectSpread(_objectSpread({}, FullImage.defaultProps), {}, {
  size: 'm',
  avatarStyle: null,
  border: true,
  circle: true
});