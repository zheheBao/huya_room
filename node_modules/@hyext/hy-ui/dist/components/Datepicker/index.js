function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

import React from 'react';
import { range, isLeapYear, convert2Digit } from '../../common/utils';
import { noop } from '../../common/utils/fns';
import { Scrollpicker } from '../Scrollpicker';
export var Datepicker = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Datepicker, _React$Component);

  function Datepicker(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;

    _this.handleChange = function (index1, index2) {
      var _this$state = _this.state,
          list = _this$state.list,
          value = _this$state.value;
      var newList = [].concat(list);
      var newValue = [].concat(value);
      newValue[index1] = index2;
      var year;
      var month;
      var day;
      var days;

      if (index1 === 0) {
        year = list[index1][index2];
        month = list[1][value[1]];
      }

      if (index1 === 1) {
        year = list[0][value[0]];
        month = list[index1][index2];
      }

      if (index1 === 2) {
        year = list[0][value[0]];
        month = list[1][value[1]];
      }

      days = _this.getDays(year, month);
      newList[2] = days;
      day = list[2][value[2]];

      if (days.indexOf(day) === -1) {
        newValue[2] = days.length - 1;
      }

      _this.setState({
        list: newList,
        value: newValue
      });

      var date = _this.getDateByIndex(newList, newValue);

      _this.props.onChange && _this.props.onChange(date);
    };

    var data = _this.initialize(props);

    _this.state = _objectSpread({}, data);
    return _this;
  }

  var _proto = Datepicker.prototype;

  _proto.initialize = function initialize(props) {
    var startYear = props.startYear,
        numberOfYears = props.numberOfYears,
        date = props.date;
    var years = range(numberOfYears).map(function (item, index) {
      return Number(startYear) + index;
    });
    var months = range(12).map(function (i) {
      return i + 1;
    });
    var input = this.getDateInputByString(date);

    if (!input) {
      date = new Date();
    } else {
      date = new Date(input[0], input[1], input[2]);
    }

    var year = date.getFullYear();
    var month = date.getMonth() + 1;
    var day = date.getDate();
    var days = this.getDays(year, month);
    var list = [years, months, days];
    var value = [years.indexOf(year), months.indexOf(month), days.indexOf(day)];
    return {
      list: list,
      value: value
    };
  };

  _proto.getDateInputByString = function getDateInputByString(param) {
    if (!param) {
      return null;
    }

    var input = param.split('-');

    if (input.length !== 3) {
      return null;
    }

    input = input.map(function (item) {
      return Number(item);
    });
    input[1] = input[1] - 1;
    var invalid = input.some(function (item) {
      if (isNaN(item) || item < 0) {
        return true;
      }
    });

    if (invalid) {
      return null;
    }

    return input;
  };

  _proto.getDays = function getDays(year, month) {
    year = parseInt(year, 10);
    month = parseInt(month, 10);
    var dayNum = 0;

    switch (month) {
      case 1:
      case 3:
      case 5:
      case 7:
      case 8:
      case 10:
      case 12:
        dayNum = 31;
        break;

      case 4:
      case 6:
      case 9:
      case 11:
        dayNum = 30;
        break;

      case 2:
        dayNum = isLeapYear(year) ? 29 : 28;
        break;
    }

    var days = range(dayNum).map(function (i) {
      return i + 1;
    });
    return days;
  };

  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var _this2 = this;

    if (nextProps.date !== this.props) {
      // 优先渲染UI, 后初始化，提高动画帧数
      setTimeout(function () {
        _this2.setState(_objectSpread({}, _this2.initialize(nextProps)));
      });
    }
  };

  _proto.getViewList = function getViewList(list) {
    return list.map(function (item, index) {
      var tmp = [];

      if (index === 0) {
        tmp = item.map(function (target) {
          return target + '年';
        });
      }

      if (index === 1) {
        tmp = item.map(function (target) {
          return target + '月';
        });
      }

      if (index === 2) {
        tmp = item.map(function (target) {
          return target + '日';
        });
      }

      return tmp;
    });
  };

  _proto.getDateByIndex = function getDateByIndex(list, value) {
    var ret = list.map(function (item, index) {
      return convert2Digit(item[value[index]]);
    });
    return ret.join('-');
  };

  _proto.render = function render() {
    var _this$state2 = this.state,
        list = _this$state2.list,
        value = _this$state2.value;
    var viewList = this.getViewList(list);
    return /*#__PURE__*/React.createElement(Scrollpicker, _extends({}, this.props, {
      list: viewList,
      value: value,
      onChange: this.handleChange
    }));
  };

  return Datepicker;
}(React.Component);
Datepicker.defaultProps = {
  startYear: 2018,
  numberOfYears: 10,
  date: 'undefined',
  onChange: noop,
  proportion: [2, 1, 1]
};