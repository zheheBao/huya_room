function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

import React from 'react';
import { View, Text, Animated } from 'react-native';
import { CheckboxItem } from './CheckboxItem';
import variables from '../../common/styles/variables';
import styles from './styles';
var ICON_POSITION;

(function (ICON_POSITION) {
  ICON_POSITION["LEFT"] = "left";
  ICON_POSITION["RIGHT"] = "right";
})(ICON_POSITION || (ICON_POSITION = {}));

export var CheckboxItemAllCheck = /*#__PURE__*/function (_CheckboxItem) {
  _inheritsLoose(CheckboxItemAllCheck, _CheckboxItem);

  function CheckboxItemAllCheck(props) {
    var _this;

    _this = _CheckboxItem.call(this, props) || this;

    _this.handlePress = function () {
      var _this$props = _this.props,
          disabled = _this$props.disabled,
          checkedStatus = _this$props.checkedStatus;

      if (disabled) {
        return;
      }

      var tmp;

      if (checkedStatus === 1 || checkedStatus === 2) {
        tmp = 3;
      }

      if (checkedStatus === 3) {
        tmp = 1;
      }

      _this.animated && _this.animated.toIn();
      _this.props.onChange && _this.props.onChange(null, tmp, true);
    };

    _this.renderIcon = function () {
      var _this$props2 = _this.props,
          checkedIcon = _this$props2.checkedIcon,
          checkedStatus = _this$props2.checkedStatus,
          iconPosition = _this$props2.iconPosition,
          uncheckedIcon = _this$props2.uncheckedIcon;
      var styleArray = [];

      if (iconPosition === ICON_POSITION.LEFT) {
        styleArray.push(styles.iconLeftPosition);
      }

      var iconView = null;

      if (checkedStatus === 3) {
        iconView = checkedIcon;
      } else {
        // TODO 半选状态
        // if (checkedStatus === 2) {
        // }
        iconView = uncheckedIcon;
      }

      var animatedStyle = {};

      if (variables.radioEnableAnimated) {
        animatedStyle = {
          transform: [{
            scale: _this.animated.getState().scale
          }],
          opacity: _this.animated.getState().opacity
        };
      }

      return /*#__PURE__*/React.createElement(View, {
        style: styleArray
      }, /*#__PURE__*/React.createElement(Animated.View, {
        style: animatedStyle
      }, iconView));
    };

    _this.state = {};
    return _this;
  }

  var _proto = CheckboxItemAllCheck.prototype;

  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    if (nextProps.checkedStatus !== this.props.checkedStatus) {
      this.animated && this.animated.toIn();
    }
  };

  _proto.renderLabel = function renderLabel() {
    var _this$props3 = this.props,
        label = _this$props3.label,
        checkedStatus = _this$props3.checkedStatus;
    return /*#__PURE__*/React.createElement(Text, {
      style: [styles.checkboxLabel, checkedStatus === 3 ? {
        color: variables.hyBrandPrimaryDark,
        fontWeight: 'bold'
      } : null]
    }, label);
  };

  return CheckboxItemAllCheck;
}(CheckboxItem);
CheckboxItemAllCheck.defaultProps = _objectSpread(_objectSpread({}, CheckboxItem.defaultProps), {}, {
  label: '全选',
  disabled: false,
  checkedStatus: 1,
  iconPosition: ICON_POSITION.LEFT,
  checkedIcon: null
});