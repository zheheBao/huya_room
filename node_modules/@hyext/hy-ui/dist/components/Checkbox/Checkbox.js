function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import { StyleSheet, View } from 'react-native';
import { CheckboxItemAllCheck } from './CheckboxItemAllCheck';
import checkboxStyles from './styles';
import variables from '../../common/styles/variables';
import { Icon } from '../Icon';
var styles = StyleSheet.create(checkboxStyles);

var Checkbox = /*#__PURE__*/function (_Component) {
  _inheritsLoose(Checkbox, _Component);

  function Checkbox(props) {
    var _this;

    _this = _Component.call(this, props) || this;
    _this.childCount = 0;
    _this.childValueArray = [];

    _this.handleChange = function (itemValue, checked, allCheckTag) {
      var value = _this.props.value;
      var tmpValue = value.concat(); // 点击选项

      if (!allCheckTag) {
        var idx = value.indexOf(itemValue);

        if (checked) {
          if (idx > -1) {// donothing
          } else {
            tmpValue.push(itemValue);
          }
        } else {
          if (idx > -1) {
            tmpValue.splice(idx, 1);
          }
        }
      } else {
        // 点击”全选“按钮
        if (checked === 1) {
          tmpValue = [];
        }

        if (checked === 3) {
          tmpValue = _this.childValueArray.concat();
        }
      }

      _this.props.onChange && _this.props.onChange(tmpValue);
    };

    React.Children.map(_this.props.children, function (child) {
      if (child.type.displayName === 'CheckboxItem') {
        _this.childCount++;

        _this.childValueArray.push(child.props.value);
      }
    });
    return _this;
  }

  var _proto = Checkbox.prototype;

  _proto.componentDidMount = function componentDidMount() {};

  _proto.validateChecked = function validateChecked(childProps) {
    var idx = this.props.value.indexOf(childProps.value);
    return idx > -1 ? true : false;
  };

  _proto.getAllCheckedStatus = function getAllCheckedStatus() {
    var value = this.props.value;

    if (value.length === 0) {
      return 1;
    }

    if (value.length < this.childCount) {
      return 2;
    }

    if (value.length >= this.childCount) {
      return 3;
    }
  };

  _proto.render = function render() {
    var _this2 = this;

    var _this$props = this.props,
        showAllCheck = _this$props.showAllCheck,
        iconPosition = _this$props.iconPosition,
        children = _this$props.children,
        style = _this$props.style,
        checkedIcon = _this$props.checkedIcon,
        uncheckedIcon = _this$props.uncheckedIcon;
    return /*#__PURE__*/React.createElement(View, {
      style: [styles.checkboxContainer, style]
    }, showAllCheck ? /*#__PURE__*/React.createElement(CheckboxItemAllCheck, {
      checkedStatus: this.getAllCheckedStatus(),
      label: "\u5168\u9009",
      iconPosition: iconPosition,
      onChange: this.handleChange,
      checkedIcon: checkedIcon,
      uncheckedIcon: uncheckedIcon
    }) : null, React.Children.map(children, function (child, index) {
      // 需要子组件自己定义了 displayName
      if (child.type.displayName === 'CheckboxItem') {
        var childProps = child.props;

        var checked = _this2.validateChecked(childProps);

        return /*#__PURE__*/React.cloneElement(child, {
          key: index,
          checked: checked,
          iconPosition: iconPosition,
          onChange: _this2.handleChange,
          checkedIcon: checkedIcon,
          uncheckedIcon: uncheckedIcon
        });
      } else {
        return /*#__PURE__*/React.cloneElement(child);
      }
    }));
  };

  return Checkbox;
}(Component);

Checkbox.displayName = 'Checkbox';
Checkbox.Item = null;
Checkbox.defaultProps = {
  value: [],
  showAllCheck: false,
  onChange: null,
  iconPosition: 'left',
  checkedIcon: /*#__PURE__*/React.createElement(Icon, {
    source: require("../../common/images/icons/check-circle.png"),
    size: variables.hyFontSizeL,
    tintColor: variables.hyBrandPrimaryDark
  }),
  uncheckedIcon: /*#__PURE__*/React.createElement(View, {
    style: styles.uncheckedIcon
  })
};
export { Checkbox as default };