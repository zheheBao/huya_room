function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import { View, Text, StyleSheet, TouchableOpacity, Animated } from 'react-native';
import checkboxItemStyle from './styles';
import variables from '../../common/styles/variables';
import { FadeAnimated } from '../../common/animations';
var styles = StyleSheet.create(checkboxItemStyle);
var ICON_POSITION;

(function (ICON_POSITION) {
  ICON_POSITION["LEFT"] = "left";
  ICON_POSITION["RIGHT"] = "right";
})(ICON_POSITION || (ICON_POSITION = {}));

export var CheckboxItem = /*#__PURE__*/function (_Component) {
  _inheritsLoose(CheckboxItem, _Component);

  function CheckboxItem(props) {
    var _this;

    _this = _Component.call(this, props) || this;

    _this.handlePress = function () {
      var _this$props = _this.props,
          disabled = _this$props.disabled,
          checked = _this$props.checked,
          value = _this$props.value;

      if (_this.props.disabled) {
        return;
      }

      _this.animated && _this.animated.toIn();
      _this.props.onChange && _this.props.onChange(value, !checked);
    };

    _this.renderIcon = function () {
      var _this$props2 = _this.props,
          checked = _this$props2.checked,
          iconPosition = _this$props2.iconPosition,
          checkedIcon = _this$props2.checkedIcon,
          uncheckedIcon = _this$props2.uncheckedIcon;
      var styleArray = [];

      if (iconPosition === ICON_POSITION.LEFT) {
        styleArray.push(styles.iconLeftPosition);
      }

      var iconView = checked ? checkedIcon : uncheckedIcon;
      var animatedStyle = {};

      if (variables.radioEnableAnimated) {
        animatedStyle = {
          transform: [{
            scale: _this.animated.getState().scale
          }],
          opacity: _this.animated.getState().opacity
        };
      }

      return /*#__PURE__*/React.createElement(View, {
        style: styleArray
      }, /*#__PURE__*/React.createElement(Animated.View, {
        style: animatedStyle
      }, iconView));
    };

    _this.state = {};

    if (variables.checkboxEnableAnimated) {
      _this.animated = new FadeAnimated({});
    }

    return _this;
  }

  var _proto = CheckboxItem.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.animated && this.animated.toIn();
  };

  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    if (nextProps.checked !== this.props.checked) {
      this.animated && this.animated.toIn();
    }
  };

  _proto.renderLabel = function renderLabel() {
    var _this$props3 = this.props,
        label = _this$props3.label,
        checked = _this$props3.checked;
    return /*#__PURE__*/React.createElement(Text, {
      style: [styles.checkboxLabel, checked ? {
        color: variables.hyBrandPrimaryDark,
        fontWeight: 'bold'
      } : null]
    }, label);
  };

  _proto.render = function render() {
    var _this$props4 = this.props,
        wrapperStyle = _this$props4.wrapperStyle,
        style = _this$props4.style,
        disabled = _this$props4.disabled,
        iconPosition = _this$props4.iconPosition,
        checked = _this$props4.checked,
        renderItem = _this$props4.renderItem;
    return /*#__PURE__*/React.createElement(TouchableOpacity, {
      style: [{
        opacity: disabled ? variables.hyOpacity : 1
      }, wrapperStyle],
      onPress: this.handlePress,
      activeOpacity: variables.hyOpacity
    }, typeof renderItem === 'function' ? renderItem(checked) : /*#__PURE__*/React.createElement(View, {
      style: [styles.checkboxItemContainer, style, iconPosition === ICON_POSITION.RIGHT ? {
        flexDirection: 'row-reverse',
        justifyContent: 'space-between'
      } : null]
    }, this.renderIcon(), this.renderLabel()));
  };

  return CheckboxItem;
}(Component);
CheckboxItem.displayName = 'CheckboxItem';
CheckboxItem.defaultProps = {
  style: {},
  label: '选项',
  value: null,
  disabled: false,
  checked: false,
  iconPosition: ICON_POSITION.LEFT,
  checkedIcon: null
};