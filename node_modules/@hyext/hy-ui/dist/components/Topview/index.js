function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import createReactClass from 'create-react-class';
import { AppRegistry, View } from 'react-native';
import variables from '../../common/styles/variables';
var topviewList = []; // 使用数组，解决因 jsbundle 切换导致的元素丢失的问题

var Topview = /*#__PURE__*/function (_Component) {
  _inheritsLoose(Topview, _Component);

  function Topview(props) {
    var _this;

    _this = _Component.call(this, props) || this;
    _this.state = {
      count: 0,
      modelList: []
    };
    return _this;
  }

  var _proto = Topview.prototype;

  _proto.componentDidMount = function componentDidMount() {
    topviewList.push(this);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    var index = topviewList.indexOf(this);
    topviewList.splice(index, 1);
  };

  _proto.add = function add(c, args) {
    var _this2 = this;

    return new Promise(function (resolve) {
      setTimeout(function () {
        var _this2$state = _this2.state,
            modelList = _this2$state.modelList,
            count = _this2$state.count;
        ++count;
        var tmp = modelList.concat();
        tmp.push({
          id: count,
          component: c,
          args: args
        });

        _this2.setState({
          count: count,
          modelList: tmp
        });

        return resolve(count);
      });
    })["catch"](function (e) {
      console.error(e);
    });
  };

  _proto.remove = function remove(id) {
    var _this3 = this;

    return new Promise(function (resolve) {
      setTimeout(function () {
        var _this3$state = _this3.state,
            modelList = _this3$state.modelList,
            count = _this3$state.count;
        var index = null;
        var matched = modelList.some(function (item, i) {
          /* tslint:disable:triple-equals */
          if (item.id == id) {
            index = i;
            return true;
          } else {
            return false;
          }
        });

        if (!matched) {
          return resolve();
        }

        var tmp = modelList.concat();
        tmp.splice(index, 1);

        if (!tmp.length) {
          count = 0;
        }

        _this3.setState({
          modelList: tmp,
          count: count
        });

        return resolve();
      });
    })["catch"](function (e) {
      console.error(e);
    });
  };

  _proto.replace = function replace(c, id) {
    var _this4 = this;

    return new Promise(function (resolve) {
      var modelList = _this4.state.modelList;
      var tmpList = modelList.concat();
      var tmpIndex;
      var tmpItem = tmpList.filter(function (item, index) {
        if (item.id === id) {
          tmpIndex = index;
          return true;
        }
      })[0];
      tmpItem = _objectSpread(_objectSpread({}, tmpItem), {}, {
        component: c
      });
      tmpList.splice(tmpIndex, 1, tmpItem);

      _this4.setState({
        modelList: tmpList
      });

      return resolve();
    })["catch"](function (e) {
      console.error(e);
    });
  };

  _proto.render = function render() {
    var modelList = this.state.modelList;

    if (!modelList.length) {
      return null;
    } else {
      return /*#__PURE__*/React.createElement(View, {
        style: {
          position: 'absolute',
          zIndex: variables.topviewZIndex == null ? 1 : variables.topviewZIndex,
          top: 0,
          left: 0,
          right: 0,
          bottom: 0
        },
        pointerEvents: "box-none",
        collapsable: false
      }, modelList.map(function (item) {
        var args = item.args || {};
        args.fullScreenPatch = args.fullScreenPatch || [];
        return item.component ? /*#__PURE__*/React.cloneElement(item.component, {
          key: item.id
        }) : null;
      }));
    }
  };

  return Topview;
}(Component); // 制作registerComponent 的替身


var originRegisterComponent = AppRegistry.registerComponent; // 改写 registerComponent 方法的实现

AppRegistry.registerComponent = function (element, func) {
  var reg = func();
  return originRegisterComponent(element, function () {
    return createReactClass({
      render: function render() {
        // 创建 root_element
        return /*#__PURE__*/React.createElement(View, {
          style: {
            flex: 1
          }
        }, /*#__PURE__*/React.createElement(reg, this.props), /*#__PURE__*/React.createElement(Topview, null));
      }
    });
  });
};

function getInstance() {
  return topviewList[topviewList.length - 1];
}

export { getInstance as TopviewGetInstance, Topview };