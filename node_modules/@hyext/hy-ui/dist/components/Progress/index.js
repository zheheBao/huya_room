function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import { View, Animated, StyleSheet } from 'react-native';
import styles from './styles';
var progressStyles = StyleSheet.create(styles);
export var Progress = /*#__PURE__*/function (_Component) {
  _inheritsLoose(Progress, _Component);

  function Progress(props) {
    var _this;

    _this = _Component.call(this, props) || this;

    _this.onLayout = function (e) {
      if (_this.state.wrapperWidth == null) {
        // console.log('onLayout: ', e.nativeEvent.layout.width)
        _this.setState({
          wrapperWidth: e.nativeEvent.layout.width
        }, function () {
          if (_this.props.easing) {
            _this.toAnimate(_this.state.barWidth, 0, _this.getWidthByPercent(_this.state.wrapperWidth, _this.props.percent), _this.props.duration);
          }
        });
      }
    };

    _this.state = {
      wrapperWidth: null,
      barWidth: new Animated.Value(0)
    };
    return _this;
  }

  var _proto = Progress.prototype;

  _proto.componentDidMount = function componentDidMount() {};

  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    if (this.props.easing && nextProps.percent !== this.props.percent) {
      this.toAnimate(this.state.barWidth, this.getWidthByPercent(this.state.wrapperWidth, this.props.percent), this.getWidthByPercent(this.state.wrapperWidth, nextProps.percent), this.props.duration);
    }
  };

  _proto.normalPercent = function normalPercent(percent) {
    var ret = 0;

    if (percent != null && percent > 0) {
      ret = percent > 100 ? 100 : percent;
    }

    return ret;
  };

  _proto.getWidthByPercent = function getWidthByPercent(baseWidth, percent) {
    return baseWidth * (this.normalPercent(percent) / 100);
  };

  _proto.toAnimate = function toAnimate(target, fromValue, toValue, duration) {
    target.setValue(fromValue);
    Animated.timing(target, {
      toValue: toValue,
      duration: duration
    }).start();
  };

  _proto.render = function render() {
    var _this$props = this.props,
        style = _this$props.style,
        barStyle = _this$props.barStyle,
        easing = _this$props.easing,
        percent = _this$props.percent;
    var _this$state = this.state,
        wrapperWidth = _this$state.wrapperWidth,
        barWidth = _this$state.barWidth;
    var percentStyle;

    if (wrapperWidth == null) {
      percentStyle = {};
    } else {
      percentStyle = easing ? {
        width: barWidth
      } : {
        width: this.getWidthByPercent(wrapperWidth, percent)
      };
    }

    return /*#__PURE__*/React.createElement(View, {
      style: [progressStyles.wrapper, style],
      onLayout: this.onLayout
    }, wrapperWidth == null ? null : easing ? /*#__PURE__*/React.createElement(Animated.View, {
      style: [progressStyles.progressBar, barStyle, percentStyle]
    }) : /*#__PURE__*/React.createElement(View, {
      style: [progressStyles.progressBar, barStyle, percentStyle]
    }));
  };

  return Progress;
}(Component);
Progress.defaultProps = {
  style: {},
  barStyle: {},
  percent: 0,
  easing: true,
  duration: 300
};