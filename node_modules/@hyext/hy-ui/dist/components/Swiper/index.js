function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

/* eslint-disable react/no-deprecated */

/* eslint-disable react/prop-types */

/**
 * fork from react-native-swiper, 兼容web端
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { Text, View, ScrollView, Dimensions, TouchableOpacity, ViewPagerAndroid, Platform, ActivityIndicator } from 'react-native';
/**
* Default styles
* @type {StyleSheetPropType}
*/

var styles = {
  container: {
    backgroundColor: 'transparent',
    position: 'relative',
    flex: 1
  },
  wrapperIOS: {
    backgroundColor: 'transparent'
  },
  wrapperAndroid: {
    backgroundColor: 'transparent',
    flex: 1
  },
  slide: {
    backgroundColor: 'transparent'
  },
  pagination_x: {
    position: 'absolute',
    bottom: 25,
    left: 0,
    right: 0,
    flexDirection: 'row',
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'transparent'
  },
  pagination_y: {
    position: 'absolute',
    right: 15,
    top: 0,
    bottom: 0,
    flexDirection: 'column',
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'transparent'
  },
  title: {
    height: 30,
    justifyContent: 'center',
    position: 'absolute',
    paddingLeft: 10,
    bottom: -30,
    left: 0,
    flexWrap: 'nowrap',
    width: 250,
    backgroundColor: 'transparent'
  },
  buttonWrapper: {
    backgroundColor: 'transparent',
    flexDirection: 'row',
    position: 'absolute',
    top: 0,
    left: 0,
    flex: 1,
    paddingHorizontal: 10,
    paddingVertical: 10,
    justifyContent: 'space-between',
    alignItems: 'center'
  },
  buttonText: {
    fontSize: 50,
    color: '#007aff'
  }
};
export var Swiper = /*#__PURE__*/function (_Component) {
  _inheritsLoose(Swiper, _Component);

  function Swiper() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;
    _this.state = _this.initState(_this.props);
    _this.initialRender = true;
    _this.autoplayTimer = null;
    _this.loopJumpTimer = null;

    _this.onLayout = function (event) {
      var _event$nativeEvent$la = event.nativeEvent.layout,
          width = _event$nativeEvent$la.width,
          height = _event$nativeEvent$la.height;
      var offset = _this.internals.offset = {};
      var state = {
        width: width,
        height: height
      };

      if (_this.state.total > 1) {
        var setup = _this.state.index;

        if (_this.props.loop) {
          setup++;
        }

        offset[_this.state.dir] = _this.state.dir === 'y' ? height * setup : width * setup;
      } // only update the offset in state if needed, updating offset while swiping
      // causes some bad jumping / stuttering


      if (!_this.state.offset || width !== _this.state.width || height !== _this.state.height) {
        state.offset = offset;
      }

      _this.setState(state); // related to https://github.com/leecade/react-native-swiper/issues/570
      // contentOffset is not working in react 0.48.x so we need to use scrollTo
      // to emulate offset.


      if (Platform.OS === 'ios' || Platform.OS === 'web') {
        if (_this.initialRender && _this.state.total > 1) {
          _this.scrollView.scrollTo(_objectSpread(_objectSpread({}, offset), {}, {
            animated: false
          }));

          _this.initialRender = false;
        }
      }
    };

    _this.loopJump = function () {
      if (!_this.state.loopJump) return;
      var index = _this.state.index;

      if (Platform.OS === 'web') {
        // 在web端，滑动到loopItem的时候，将索引重置为原索引
        _this.loopJumpTimer = setTimeout(function () {
          _this.scrollBy(0, false);
        }, 500);
      } else {
        var i = index + (_this.props.loop ? 1 : 0);
        var scrollView = _this.scrollView;
        _this.loopJumpTimer = setTimeout(function () {
          scrollView.setPageWithoutAnimation && scrollView.setPageWithoutAnimation(i);
        }, 50);
      }
    };

    _this.autoplay = function () {
      if (!Array.isArray(_this.props.children) || !_this.props.autoplay || _this.internals.isScrolling || _this.state.autoplayEnd) return;
      _this.autoplayTimer && clearTimeout(_this.autoplayTimer);
      _this.autoplayTimer = setTimeout(function () {
        if (!_this.props.loop && (_this.props.autoplayDirection ? _this.state.index === _this.state.total - 1 : _this.state.index === 0)) return _this.setState({
          autoplayEnd: true
        });

        _this.scrollBy(_this.props.autoplayDirection ? 1 : -1);
      }, _this.props.autoplayTimeout * 1000);
    };

    _this.onScrollBegin = function (e) {
      // update scroll state
      _this.internals.isScrolling = true;
      _this.props.onScrollBeginDrag && _this.props.onScrollBeginDrag(e, _this.fullState(), _assertThisInitialized(_this));
    };

    _this.onScrollEnd = function (e) {
      // update scroll state
      _this.internals.isScrolling = false; // making our events coming from android compatible to updateIndex logic

      if (!e.nativeEvent.contentOffset) {
        if (_this.state.dir === 'x') {
          e.nativeEvent.contentOffset = {
            x: e.nativeEvent.position * _this.state.width
          };
        } else {
          e.nativeEvent.contentOffset = {
            y: e.nativeEvent.position * _this.state.height
          };
        }
      }

      _this.updateIndex(e.nativeEvent.contentOffset, _this.state.dir, function () {
        _this.autoplay();

        _this.loopJump(); // if `onMomentumScrollEnd` registered will be called here


        _this.props.onMomentumScrollEnd && _this.props.onMomentumScrollEnd(e, _this.fullState(), _assertThisInitialized(_this));
      });
    };

    _this.onScrollEndDrag = function (e) {
      var contentOffset = e.nativeEvent.contentOffset;
      var _this$props = _this.props,
          horizontal = _this$props.horizontal,
          children = _this$props.children;
      var index = _this.state.index;
      var offset = _this.internals.offset;
      var previousOffset = horizontal ? offset.x : offset.y;
      var newOffset = horizontal ? contentOffset.x : contentOffset.y;

      if (previousOffset === newOffset && (index === 0 || index === children.length - 1)) {
        _this.internals.isScrolling = false;
      }
    };

    _this.updateIndex = function (offset, dir, cb) {
      var state = _this.state;
      var index = state.index; // Android not setting this onLayout first? https://github.com/leecade/react-native-swiper/issues/582

      if (!_this.internals.offset) {
        _this.internals.offset = {};
      }

      var diff = offset[dir] - _this.internals.offset[dir];
      var step = dir === 'x' ? state.width : state.height;
      var loopJump = false; // Do nothing if offset no change.

      if (!diff) return; // Note: if touch very very quickly and continuous,
      // the variation of `index` more than 1.
      // parseInt() ensures it's always an integer

      index = parseInt(index + Math.round(diff / step));

      if (_this.props.loop) {
        if (index <= -1) {
          index = state.total - 1;
          offset[dir] = step * state.total;
          loopJump = true;
        } else if (index >= state.total) {
          index = 0;
          offset[dir] = step;
          loopJump = true;
        }
      }

      var newState = {};
      newState.index = index;
      newState.loopJump = loopJump;
      _this.internals.offset = offset; // only update offset in state if loopJump is true

      if (loopJump) {
        // when swiping to the beginning of a looping set for the third time,
        // the new offset will be the same as the last one set in state.
        // Setting the offset to the same thing will not do anything,
        // so we increment it by 1 then immediately set it to what it should be,
        // after render.
        if (offset[dir] === _this.internals.offset[dir]) {
          newState.offset = {
            x: 0,
            y: 0
          };
          newState.offset[dir] = offset[dir] + 1;

          _this.setState(newState, function () {
            _this.setState({
              offset: offset
            }, cb);
          });
        } else {
          newState.offset = offset;

          _this.setState(newState, cb);
        }
      } else {
        _this.setState(newState, cb);
      }
    };

    _this.scrollBy = function (index, animated) {
      if (animated === void 0) {
        animated = true;
      }

      if (_this.internals.isScrolling || _this.state.total < 2) return;
      var state = _this.state;
      var diff = (_this.props.loop ? 1 : 0) + index + _this.state.index;
      var x = 0;
      var y = 0;
      if (state.dir === 'x') x = diff * state.width;
      if (state.dir === 'y') y = diff * state.height;

      if (Platform.OS !== 'ios' && Platform.OS !== 'web') {
        _this.scrollView && _this.scrollView[animated ? 'setPage' : 'setPageWithoutAnimation'](diff);
      } else {
        _this.scrollView && _this.scrollView.scrollTo({
          x: x,
          y: y,
          animated: animated
        });
      } // update scroll state


      _this.internals.isScrolling = true;

      _this.setState({
        autoplayEnd: false
      }); // trigger onScrollEnd manually in android and web


      if (!animated || Platform.OS !== 'ios') {
        setImmediate(function () {
          _this.onScrollEnd({
            nativeEvent: {
              position: diff
            }
          });
        });
      }
    };

    _this.scrollViewPropOverrides = function () {
      var props = _this.props;
      var overrides = {};
      /*
      const scrollResponders = [
        'onMomentumScrollBegin',
        'onTouchStartCapture',
        'onTouchStart',
        'onTouchEnd',
        'onResponderRelease',
      ]
      */

      for (var prop in props) {
        // if(~scrollResponders.indexOf(prop)
        if (typeof props[prop] === 'function' && prop !== 'onMomentumScrollEnd' && prop !== 'renderPagination' && prop !== 'onScrollBeginDrag') {
          (function () {
            var originResponder = props[prop];

            overrides[prop] = function (e) {
              return originResponder(e, _this.fullState(), _assertThisInitialized(_this));
            };
          })();
        }
      }

      return overrides;
    };

    _this.renderPagination = function () {
      // By default, dots only show when `total` >= 2
      if (_this.state.total <= 1) return null;
      var dots = [];
      var ActiveDot = _this.props.activeDot || /*#__PURE__*/React.createElement(View, {
        style: [{
          backgroundColor: _this.props.activeDotColor || '#007aff',
          width: 8,
          height: 8,
          borderRadius: 4,
          marginLeft: 3,
          marginRight: 3,
          marginTop: 3,
          marginBottom: 3
        }, _this.props.activeDotStyle]
      });
      var Dot = _this.props.dot || /*#__PURE__*/React.createElement(View, {
        style: [{
          backgroundColor: _this.props.dotColor || 'rgba(0,0,0,.2)',
          width: 8,
          height: 8,
          borderRadius: 4,
          marginLeft: 3,
          marginRight: 3,
          marginTop: 3,
          marginBottom: 3
        }, _this.props.dotStyle]
      });

      for (var i = 0; i < _this.state.total; i++) {
        dots.push(i === _this.state.index ? /*#__PURE__*/React.cloneElement(ActiveDot, {
          key: i
        }) : /*#__PURE__*/React.cloneElement(Dot, {
          key: i
        }));
      }

      return /*#__PURE__*/React.createElement(View, {
        pointerEvents: "none",
        style: [styles['pagination_' + _this.state.dir], _this.props.paginationStyle]
      }, dots);
    };

    _this.renderTitle = function () {
      var child = _this.props.children[_this.state.index];
      var title = child && child.props && child.props.title;
      return title ? /*#__PURE__*/React.createElement(View, {
        style: styles.title
      }, _this.props.children[_this.state.index].props.title) : null;
    };

    _this.renderNextButton = function () {
      var button = null;

      if (_this.props.loop || _this.state.index !== _this.state.total - 1) {
        button = _this.props.nextButton || /*#__PURE__*/React.createElement(Text, {
          style: styles.buttonText
        }, "\u203A");
      }

      return /*#__PURE__*/React.createElement(TouchableOpacity, {
        onPress: function onPress() {
          return button !== null && _this.scrollBy(1);
        },
        disabled: _this.props.disableNextButton
      }, /*#__PURE__*/React.createElement(View, null, button));
    };

    _this.renderPrevButton = function () {
      var button = null;

      if (_this.props.loop || _this.state.index !== 0) {
        button = _this.props.prevButton || /*#__PURE__*/React.createElement(Text, {
          style: styles.buttonText
        }, "\u2039");
      }

      return /*#__PURE__*/React.createElement(TouchableOpacity, {
        onPress: function onPress() {
          return button !== null && _this.scrollBy(-1);
        }
      }, /*#__PURE__*/React.createElement(View, null, button));
    };

    _this.renderButtons = function () {
      return /*#__PURE__*/React.createElement(View, {
        pointerEvents: "box-none",
        style: [styles.buttonWrapper, {
          width: _this.state.width,
          height: _this.state.height
        }, _this.props.buttonWrapperStyle]
      }, _this.renderPrevButton(), _this.renderNextButton());
    };

    _this.refScrollView = function (view) {
      _this.scrollView = view;
    };

    _this.onPageScrollStateChanged = function (state) {
      switch (state) {
        case 'dragging':
          return _this.onScrollBegin();

        case 'idle':
        case 'settling':
          if (_this.props.onTouchEnd) _this.props.onTouchEnd();
      }
    };

    _this.renderScrollView = function (pages) {
      if (Platform.OS === 'ios' || Platform.OS === 'web') {
        return /*#__PURE__*/React.createElement(ScrollView, _extends({
          ref: _this.refScrollView
        }, _this.props, _this.scrollViewPropOverrides(), {
          contentContainerStyle: [styles.wrapperIOS, _this.props.style],
          contentOffset: _this.state.offset,
          onScrollBeginDrag: _this.onScrollBegin,
          onMomentumScrollEnd: _this.onScrollEnd,
          onScrollEndDrag: _this.onScrollEndDrag,
          style: _this.props.scrollViewStyle
        }), pages);
      }

      return /*#__PURE__*/React.createElement(ViewPagerAndroid, _extends({
        ref: _this.refScrollView
      }, _this.props, {
        initialPage: _this.props.loop ? _this.state.index + 1 : _this.state.index,
        onPageScrollStateChanged: _this.onPageScrollStateChanged,
        onPageSelected: _this.onScrollEnd,
        key: pages.length,
        style: [styles.wrapperAndroid, _this.props.style]
      }), pages);
    };

    return _this;
  }

  var _proto = Swiper.prototype;

  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    if (!nextProps.autoplay && this.autoplayTimer) clearTimeout(this.autoplayTimer);
    this.setState(this.initState(nextProps, this.props.index !== nextProps.index));
  };

  _proto.componentDidMount = function componentDidMount() {
    this.autoplay();
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.autoplayTimer && clearTimeout(this.autoplayTimer);
    this.loopJumpTimer && clearTimeout(this.loopJumpTimer);
  };

  _proto.componentWillUpdate = function componentWillUpdate(nextProps, nextState) {
    // If the index has changed, we notify the parent via the onIndexChanged callback
    if (this.state.index !== nextState.index) this.props.onIndexChanged(nextState.index);
  };

  _proto.initState = function initState(props, updateIndex) {
    if (updateIndex === void 0) {
      updateIndex = false;
    }

    // set the current state
    var state = this.state || {
      width: 0,
      height: 0,
      offset: {
        x: 0,
        y: 0
      }
    };
    var initState = {
      autoplayEnd: false,
      loopJump: false,
      offset: {}
    };
    initState.total = props.children ? props.children.length || 1 : 0;

    if (state.total === initState.total && !updateIndex) {
      // retain the index
      initState.index = state.index;
    } else {
      initState.index = initState.total > 1 ? Math.min(props.index, initState.total - 1) : 0;
    } // Default: horizontal


    var _Dimensions$get = Dimensions.get('window'),
        width = _Dimensions$get.width,
        height = _Dimensions$get.height;

    initState.dir = props.horizontal === false ? 'y' : 'x';

    if (props.width) {
      initState.width = props.width;
    } else if (this.state && this.state.width) {
      initState.width = this.state.width;
    } else {
      initState.width = width;
    }

    if (props.height) {
      initState.height = props.height;
    } else if (this.state && this.state.height) {
      initState.height = this.state.height;
    } else {
      initState.height = height;
    }

    initState.offset[initState.dir] = initState.dir === 'y' ? height * props.index : width * props.index;
    this.internals = _objectSpread(_objectSpread({}, this.internals), {}, {
      isScrolling: false
    });
    return initState;
  } // include internals with state
  ;

  _proto.fullState = function fullState() {
    return Object.assign({}, this.state, this.internals);
  };

  /**
   * Default render
   * @return {object} react-dom
   */
  _proto.render = function render() {
    var _this$state = this.state,
        index = _this$state.index,
        total = _this$state.total,
        width = _this$state.width,
        height = _this$state.height;
    var _this$props2 = this.props,
        children = _this$props2.children,
        containerStyle = _this$props2.containerStyle,
        loop = _this$props2.loop,
        loadMinimal = _this$props2.loadMinimal,
        loadMinimalSize = _this$props2.loadMinimalSize,
        loadMinimalLoader = _this$props2.loadMinimalLoader,
        renderPagination = _this$props2.renderPagination,
        showsButtons = _this$props2.showsButtons,
        showsPagination = _this$props2.showsPagination; // let dir = state.dir
    // let key = 0

    var loopVal = loop ? 1 : 0;
    var pages = [];
    var pageStyle = [{
      width: width,
      height: height
    }, styles.slide];
    var pageStyleLoading = {
      width: width,
      height: height,
      flex: 1,
      justifyContent: 'center',
      alignItems: 'center'
    }; // For make infinite at least total > 1

    if (total > 1) {
      // Re-design a loop model for avoid img flickering
      pages = Object.keys(children);

      if (loop) {
        pages.unshift(total - 1 + '');
        pages.push('0');
      }

      pages = pages.map(function (page, i) {
        if (loadMinimal) {
          if (i >= index + loopVal - loadMinimalSize && i <= index + loopVal + loadMinimalSize) {
            return /*#__PURE__*/React.createElement(View, {
              style: pageStyle,
              key: i
            }, children[page]);
          } else {
            return /*#__PURE__*/React.createElement(View, {
              style: pageStyleLoading,
              key: i
            }, loadMinimalLoader || /*#__PURE__*/React.createElement(ActivityIndicator, null));
          }
        } else {
          return /*#__PURE__*/React.createElement(View, {
            style: pageStyle,
            key: i
          }, children[page]);
        }
      });
    } else {
      pages = /*#__PURE__*/React.createElement(View, {
        style: pageStyle,
        key: 0
      }, children);
    }

    return /*#__PURE__*/React.createElement(View, {
      style: [styles.container, containerStyle],
      onLayout: this.onLayout
    }, this.renderScrollView(pages), showsPagination && (renderPagination ? renderPagination(index, total, this) : this.renderPagination()), this.renderTitle(), showsButtons && this.renderButtons());
  };

  return Swiper;
}(Component);
Swiper.defaultProps = {
  horizontal: true,
  pagingEnabled: true,
  showsHorizontalScrollIndicator: false,
  showsVerticalScrollIndicator: false,
  bounces: false,
  scrollsToTop: false,
  removeClippedSubviews: true,
  automaticallyAdjustContentInsets: false,
  showsPagination: true,
  showsButtons: false,
  disableNextButton: false,
  loop: true,
  loadMinimal: false,
  loadMinimalSize: 1,
  autoplay: false,
  autoplayTimeout: 2.5,
  autoplayDirection: true,
  index: 0,
  onIndexChanged: function onIndexChanged() {
    return null;
  }
};
Swiper.propTypes = process.env.NODE_ENV !== "production" ? {
  horizontal: PropTypes.bool,
  children: PropTypes.node.isRequired,
  containerStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number]),
  style: PropTypes.oneOfType([PropTypes.object, PropTypes.number]),
  scrollViewStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number]),
  pagingEnabled: PropTypes.bool,
  showsHorizontalScrollIndicator: PropTypes.bool,
  showsVerticalScrollIndicator: PropTypes.bool,
  bounces: PropTypes.bool,
  scrollsToTop: PropTypes.bool,
  removeClippedSubviews: PropTypes.bool,
  automaticallyAdjustContentInsets: PropTypes.bool,
  showsPagination: PropTypes.bool,
  showsButtons: PropTypes.bool,
  disableNextButton: PropTypes.bool,
  loadMinimal: PropTypes.bool,
  loadMinimalSize: PropTypes.number,
  loadMinimalLoader: PropTypes.element,
  loop: PropTypes.bool,
  autoplay: PropTypes.bool,
  autoplayTimeout: PropTypes.number,
  autoplayDirection: PropTypes.bool,
  index: PropTypes.number,
  renderPagination: PropTypes.func,
  dotStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number]),
  activeDotStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number]),
  dotColor: PropTypes.string,
  activeDotColor: PropTypes.string,

  /**
   * Called when the index has changed because the user swiped.
   */
  onIndexChanged: PropTypes.func
} : {};