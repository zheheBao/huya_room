function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

import React, { Component } from "react";
import { View, Image as RN_Image } from "react-native";
import { Image } from "../base";
export var SafeImage = /*#__PURE__*/function (_Component) {
  _inheritsLoose(SafeImage, _Component);

  function SafeImage(props) {
    var _this;

    _this = _Component.call(this, props) || this;

    _this.handleError = function (e) {
      var _this$props = _this.props,
          onError = _this$props.onError,
          backupSrc = _this$props.backupSrc;

      if (backupSrc !== void 0) {
        _this.updateSrc(backupSrc);
      }

      if (typeof onError === 'function') {
        onError(e);
      }
    };

    _this.updateSrc = function (src) {
      _this.setState({
        src: src
      });
    };

    _this.init(props, true);

    return _this;
  }

  var _proto = SafeImage.prototype;

  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    this.init(nextProps);
  };

  _proto.init = function init(props, syncTag) {
    if (syncTag) {
      this.state = {
        src: props.src
      };
    } else {
      this.updateSrc(props.src);
    }
  };

  _proto.render = function render() {
    var src = this.state.src;
    var _this$props2 = this.props,
        style = _this$props2.style,
        onLoad = _this$props2.onLoad;
    return /*#__PURE__*/React.createElement(Image, {
      style: style,
      onLoad: onLoad,
      src: src,
      onError: this.handleError
    });
  };

  return SafeImage;
}(Component);
SafeImage.defautProps = {
  src: '',
  backupSrc: '',
  onError: null,
  onLoad: null
};
export var FullImage = /*#__PURE__*/function (_Component2) {
  _inheritsLoose(FullImage, _Component2);

  function FullImage() {
    var _this2;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this2 = _Component2.call.apply(_Component2, [this].concat(args)) || this;
    _this2.state = {
      parentRect: null,
      ratio: null,
      visibleInFull: false
    };
    _this2.$parent = null;

    _this2.extendRectWhenFull = function () {
      var _this2$props = _this2.props,
          full = _this2$props.full,
          fullType = _this2$props.fullType;
      if (!full) return;

      _this2.$parent.measure(function (fx, fy, width, height, px, py) {
        var state = _this2.state;

        var newState = _objectSpread(_objectSpread({}, state), {}, {
          parentRect: {
            width: width,
            height: height
          }
        });

        if (fullType === 'width' || fullType === 'height') {
          _this2.getRatioByImageRawSize().then(function (ratio) {
            newState.ratio = ratio;

            _this2.setState(newState);
          })["catch"](function (e) {
            console.log('获取图片尺寸失败', e);
          });
        } else if (fullType === 'all') {
          _this2.setState(newState);
        }
      });
    };

    return _this2;
  }

  var _proto2 = FullImage.prototype;

  _proto2.calcRealValue = function calcRealValue(size, reverse) {
    var ratio = this.state.ratio;
    var realValue;

    if (size > 0 && ratio !== null) {
      realValue = !reverse ? size / ratio : size * ratio;
      return Math.round(realValue);
    }

    return 1;
  };

  _proto2.getStyle = function getStyle() {
    var _this$props3 = this.props,
        full = _this$props3.full,
        _this$props3$wrapperS = _this$props3.wrapperStyle,
        wrapperStyle = _this$props3$wrapperS === void 0 ? {} : _this$props3$wrapperS,
        _this$props3$imageSty = _this$props3.imageStyle,
        imageStyle = _this$props3$imageSty === void 0 ? {} : _this$props3$imageSty,
        fullType = _this$props3.fullType;
    var parentRect = this.state.parentRect;

    if (full) {
      wrapperStyle = _objectSpread(_objectSpread({}, wrapperStyle), {}, {
        width: null,
        height: null,
        flex: 1
      });

      if (parentRect !== null) {
        if (fullType === 'all') {
          imageStyle = _objectSpread(_objectSpread({}, imageStyle), {}, {
            width: parentRect.width,
            height: parentRect.height
          });
        } else if (fullType === 'width') {
          // 支持自定义width、height? 这样可以少嵌套一层view，不过麻烦点需要加参数
          imageStyle = _objectSpread(_objectSpread({}, imageStyle), {}, {
            width: parentRect.width,
            height: this.calcRealValue(parentRect.width)
          });
        } else if (fullType === 'height') {
          imageStyle = _objectSpread(_objectSpread({}, imageStyle), {}, {
            width: this.calcRealValue(parentRect.height, true),
            height: parentRect.height
          });
        }
      }
    }

    return {
      wrapperStyle: wrapperStyle,
      imageStyle: imageStyle
    };
  };

  _proto2.getImageRawSizeInLocal = function getImageRawSizeInLocal(src) {
    var res = RN_Image.resolveAssetSource(src);

    if (res && res.height !== void 0 && res.width !== void 0) {
      return Promise.resolve({
        height: res.height,
        width: res.width
      });
    }

    return Promise.reject('not found the rect from local image');
  };

  _proto2.getImageRawSizeInNetWork = function getImageRawSizeInNetWork(src) {
    return new Promise(function (resolve, reject) {
      RN_Image.getSize(src, function (width, height) {
        resolve({
          width: width,
          height: height
        });
      }, function (e) {
        reject(e);
      });
    });
  };

  _proto2.getRatioByImageRawSize = function getRatioByImageRawSize() {
    var src = this.props.src;
    var isLocalUrl = typeof src === 'number';
    var promise = isLocalUrl ? this.getImageRawSizeInLocal(src) : this.getImageRawSizeInNetWork(src);
    return promise.then(function (_ref) {
      var width = _ref.width,
          height = _ref.height;
      var ratio = width / height;
      return Number(ratio.toFixed(2));
    });
  };

  _proto2.componentWillReceiveProps = function componentWillReceiveProps() {
    this.extendRectWhenFull();
  };

  _proto2.componentDidMount = function componentDidMount() {
    var _this3 = this;

    setTimeout(function () {
      _this3.extendRectWhenFull();
    });
  };

  _proto2.render = function render() {
    var _this4 = this;

    var _this$getStyle = this.getStyle(),
        wrapperStyle = _this$getStyle.wrapperStyle,
        imageStyle = _this$getStyle.imageStyle;

    var _this$props4 = this.props,
        src = _this$props4.src,
        full = _this$props4.full,
        fullType = _this$props4.fullType,
        rest = _objectWithoutPropertiesLoose(_this$props4, ["src", "full", "fullType"]);

    var opacity = 1;

    if (full && this.state.parentRect === null) {
      opacity = 0;
    }

    return /*#__PURE__*/React.createElement(View, {
      ref: function ref(c) {
        _this4.$parent = c;
      },
      style: [wrapperStyle, {
        opacity: opacity
      }]
    }, /*#__PURE__*/React.createElement(SafeImage, _extends({}, rest, {
      style: imageStyle,
      src: src
    })));
  };

  return FullImage;
}(Component);
FullImage.defaultProps = _objectSpread(_objectSpread({}, SafeImage.defautProps), {}, {
  full: false,
  fullType: 'all',
  wrapperStyle: null,
  imageStyle: null
});