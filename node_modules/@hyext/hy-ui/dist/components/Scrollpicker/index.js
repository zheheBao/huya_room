function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

import React from 'react';
import { View, Text, ScrollView, PixelRatio } from 'react-native';
import variables from '../../common/styles/variables';
import { range } from '../../common/utils';
import scrollpickerStyles from './styles';
import { TouchScroller } from "./touch-scroller";
import { isWeb } from '../../common/utils/env';
export { scrollpickerStyles };
var px = 1 / PixelRatio.get();
var DEFAULT_CONTAINER_HEIGHT = 1;
export var Scrollpicker = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Scrollpicker, _React$Component);

  function Scrollpicker(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.containerRef = null;
    _this.scrollers = [];
    _this.targetItemHeight = null;
    _this.containerHeight = null;
    _this.containerRef = null;

    var data = _this.initialize(props);

    _this.state = _objectSpread(_objectSpread({}, data), {}, {
      targetItemHeight: null,
      containerHeight: null
    });
    _this.scrollers = [];
    return _this;
  }

  var _proto = Scrollpicker.prototype;

  _proto.initialize = function initialize(props) {
    var data = this.initData(props);
    return data;
  };

  _proto.initData = function initData(props) {
    var list = props.list,
        proportion = props.proportion,
        value = props.value;

    if (!list || !list.length) {
      throw TypeError('提供有效的 list 参数');
    }

    var offsetCount = this.props.offsetCount;
    var placeholderList = range(offsetCount).map(function () {
      return '';
    });
    list = list.map(function (scrollItem) {
      var tmp = scrollItem.concat();
      [].push.apply(tmp, placeholderList);
      [].unshift.apply(tmp, placeholderList);
      return tmp;
    });
    var length = list.length;

    if (!proportion || !proportion.length || proportion && proportion.length && proportion.length !== length) {
      proportion = range(length).map(function () {
        return 1;
      });
    }

    if (!value || !value.length || value && value.length && value.length !== length) {
      value = range(length).map(function () {
        return 0;
      });
    }

    return {
      list: list,
      value: value,
      proportion: proportion
    };
  };

  _proto.componentDidMount = function componentDidMount() {
    var _this2 = this;

    this.getUIData(this.containerRef, DEFAULT_CONTAINER_HEIGHT).then(function (data) {
      var targetItemHeight = data.targetItemHeight;

      var containerHeight = _this2.resizeContainerHeight(targetItemHeight);

      _this2.setState({
        containerHeight: containerHeight,
        targetItemHeight: targetItemHeight
      }, function () {
        _this2.getUIData(_this2.containerRef, _this2.state.containerHeight).then(function (uiData) {
          var value = _this2.state.value;
          value.forEach(function (item, index) {
            _this2.scrollTo(index, item, false);
          });
        })["catch"](function (e) {
          console.log(e);
        });
      });
    })["catch"](function (e) {
      console.log(e);
    });
  };

  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var _this3 = this;

    if (nextProps !== this.props) {
      var data = this.initialize(nextProps);
      this.setState(_objectSpread({}, data), function () {
        setTimeout(function () {
          var value = _this3.state.value;
          value.forEach(function (item, index) {
            _this3.scrollTo(index, item);
          });
        });
      });
    }
  };

  _proto.getUIData = function getUIData(element, accurateHeight, maxCount) {
    var _this4 = this;

    var count = 0;
    maxCount = maxCount == null ? 20 : maxCount;
    return new Promise(function (resolve, reject) {
      var toCheck = null;

      var measure = function measure() {
        var ret = null;
        element.measure(function (x, y, width, height, left, top) {
          // console.log(
          //   `Get container height: ${height}, accurate height: ${accurateHeight} and target item height: ${
          //     this.targetItemHeight
          //   } for ${++count}th.`
          // )
          if (height) {
            // 安卓机器获取高度不精确
            var needToReset = height % 1 === 0 ? false : true;
            var minHeight;
            var maxHeight;

            if (needToReset) {
              minHeight = Math.floor(height);
              maxHeight = minHeight + 1;
            } else {
              minHeight = maxHeight = height;
            }

            if ((minHeight === accurateHeight || maxHeight === accurateHeight) && _this4.targetItemHeight) {
              ret = {
                rect: {
                  x: x,
                  y: y,
                  width: width,
                  height: height
                },
                targetItemHeight: _this4.targetItemHeight
              };
            }
          }

          toCheck(ret);
        });
      };

      toCheck = function toCheck(ret) {
        if (ret) {
          return resolve(ret);
        } else {
          if (count < maxCount) {
            setTimeout(function () {
              measure();
            }, 20);
          } else {
            return reject('获取元素高度失败！');
          }
        }
      };

      measure();
    });
  };

  _proto.resizeContainerHeight = function resizeContainerHeight(targetItemHeight) {
    var offsetCount = this.props.offsetCount;
    var ret = targetItemHeight + 2 * (targetItemHeight * offsetCount);
    return ret;
  };

  _proto.locateIndicator = function locateIndicator(targetItemHeight) {
    var styles = scrollpickerStyles;
    var offsetCount = this.props.offsetCount;
    return /*#__PURE__*/React.createElement(View, {
      style: [styles.indicator],
      pointerEvents: "none"
    }, /*#__PURE__*/React.createElement(View, {
      style: [styles.indicator, styles.indicatorMask, {
        bottom: targetItemHeight + offsetCount * targetItemHeight
      }, {
        borderBottomWidth: 1 * px,
        borderBottomColor: variables.hyBorderColorDark
      }]
    }), /*#__PURE__*/React.createElement(View, {
      style: [styles.indicator, styles.indicatorMask, {
        top: targetItemHeight + offsetCount * targetItemHeight
      }, {
        borderTopWidth: 1 * px,
        borderTopColor: variables.hyBorderColorDark
      }]
    }));
  };

  _proto.scrollTo = function scrollTo(scrollIndex, targetItemIndex, animated) {
    var targetItemHeight = this.state.targetItemHeight; // const { offsetCount } = this.props

    this.scrollProper(scrollIndex, targetItemHeight * targetItemIndex, animated);
  };

  _proto.onScroll = function onScroll(scrollIndex, scrollHeight) {
    var targetItemIndex = this.scrollProper(scrollIndex, scrollHeight);
    this.props.onChange && this.props.onChange(scrollIndex, targetItemIndex);
  };

  _proto.scrollProper = function scrollProper(scrollIndex, scrollHeight, animated) {
    var _this$state = this.state,
        targetItemHeight = _this$state.targetItemHeight,
        list = _this$state.list;
    var offsetCount = this.props.offsetCount;
    var scrollListLength = list[scrollIndex].length;
    var newScrollHeight;
    var min = 0;
    var max = (scrollListLength - 2 * offsetCount - 1) * targetItemHeight; // 最少显示底部三个item

    if (scrollHeight <= min) {
      newScrollHeight = min;
    } else if (scrollHeight >= max) {
      // 滑动到底部，显示的item少于三个，则回滚显示三个item
      newScrollHeight = max;
    } else {
      var quotient = parseInt(String(scrollHeight / targetItemHeight), 10); // 新滚动距离默认往下取整

      newScrollHeight = quotient * targetItemHeight;
      var halfHeight = targetItemHeight / 2; // 原滚动的距离超过item的1/2, 新滚动距离就加上一个item高度

      if (scrollHeight - newScrollHeight > halfHeight) {
        newScrollHeight += targetItemHeight;
      }
    }

    this.scrollers[scrollIndex] && this.scrollers[scrollIndex].scrollTo && this.scrollers[scrollIndex].scrollTo({
      x: 0,
      y: newScrollHeight,
      animated: animated === false ? false : true
    });
    var targetItemIndex = newScrollHeight / targetItemHeight;
    return targetItemIndex;
  };

  _proto.render = function render() {
    var _this5 = this;

    var styles = scrollpickerStyles;
    var _this$state2 = this.state,
        list = _this$state2.list,
        proportion = _this$state2.proportion,
        containerHeight = _this$state2.containerHeight,
        targetItemHeight = _this$state2.targetItemHeight;
    var Scroller = isWeb ? TouchScroller : ScrollView;
    return /*#__PURE__*/React.createElement(View, {
      ref: function ref(el) {
        _this5.containerRef = el;
      },
      style: [styles.container, this.props.style, {
        height: containerHeight || DEFAULT_CONTAINER_HEIGHT
      }]
    }, containerHeight && this.locateIndicator(targetItemHeight), list.map(function (scrollItem, scrollIndex) {
      return /*#__PURE__*/React.createElement(View, {
        key: scrollIndex,
        style: [styles.proportionWrapper, {
          flex: Number(proportion[scrollIndex])
        }]
      }, /*#__PURE__*/React.createElement(Scroller, {
        ref: function ref(c) {
          _this5.scrollers[scrollIndex] = c;
        },
        style: styles.scroller,
        showsVerticalScrollIndicator: false,
        contentContainerStyle: [styles.scrollerContentContainer],
        onScrollEndDrag: function onScrollEndDrag(e) {
          _this5.onScroll(scrollIndex, e.nativeEvent.contentOffset.y);
        }
      }, scrollItem.map(function (item, index) {
        return /*#__PURE__*/React.createElement(View, {
          key: index,
          style: [styles.targetItem, {
            height: targetItemHeight
          }],
          onLayout: function onLayout(e) {
            if (item && _this5.targetItemHeight == null && e.nativeEvent.layout.height) {
              _this5.targetItemHeight = Math.ceil(e.nativeEvent.layout.height); // console.log(
              //   'OnLayout get target item height:',
              //   this.targetItemHeight
              // )
            }
          }
        }, _this5.props.renderItem ? _this5.props.renderItem(item, index) : /*#__PURE__*/React.createElement(Text, {
          style: [styles.targetItemContent],
          numberOfLines: 1
        }, typeof item === 'object' ? item.label : item));
      })));
    }));
  };

  return Scrollpicker;
}(React.Component);
Scrollpicker.defaultProps = {
  style: {},
  list: [['第一列第一项', '第一列第二项', '第一列第三项'], ['第二列第一项', '第二列第二项', '第二列第三项'], ['第三列第一项', '第三列第二项', '第三列第三项']],
  value: [],
  proportion: [2, 1, 1],
  offsetCount: 2,
  onChange: null,
  renderItem: null
};