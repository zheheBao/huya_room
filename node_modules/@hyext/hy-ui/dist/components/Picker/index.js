function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

import React from 'react';
import { Text, TouchableOpacity, View, StyleSheet, Dimensions } from 'react-native';
import variables from '../../common/styles/variables';
import pickerStyles from './styles';
import { Icon } from '../Icon';
import { SlideModal } from '../SlideModal';
var window = Dimensions.get('window');
export var Picker = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Picker, _React$Component);

  function Picker(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.slideModal = null;
    _this.trigger = null;

    _this.handleToggle = function (active) {
      var _this$props = _this.props,
          disabled = _this$props.disabled,
          onToggle = _this$props.onToggle;

      if (disabled) {
        return Promise.reject(new Error("Picker \u5C5E\u6027 disabled \u4E3A true \u4E0D\u80FD" + (active ? '打开' : '关闭')));
      }

      return new Promise(function (resolve) {
        _this.setState({
          active: active
        }, function () {
          onToggle && onToggle(active);
          resolve(_this.state.active);
        });
      });
    };

    _this.handlePress = function () {
      if (_this.props.disabled) {
        return;
      }

      if (_this.state.active) {
        _this.close()["catch"](function (e) {
          console.log(e);
        });
      } else {
        _this.open()["catch"](function (e) {
          console.log(e);
        });
      }
    };

    _this.state = {
      active: false
    };
    return _this;
  }

  var _proto = Picker.prototype;

  _proto.close = function close() {
    if (this.props.disabled) {
      return Promise.reject(new Error('Picker 组件 disabled 属性为 true，不能关闭'));
    }

    if (!this.slideModal) {
      return Promise.reject(new Error('Picker 组件的 slideModal 属性不存在，无法关闭'));
    }

    return this.slideModal.close();
  };

  _proto.open = function open() {
    var _this2 = this;

    if (this.props.disabled) {
      return Promise.reject(new Error('Picker 组件 disabled 属性为 true 不能打开'));
    }

    return new Promise(function (resolve, reject) {
      if (!_this2.trigger) {
        return reject(new Error('Picker 组件的 trigger 属性不存在，无法打开'));
      }

      _this2.trigger.measure(function (fx, fy, width, height, px, py) {
        _this2.setState({
          offsetY: py + height
        }, function () {
          _this2.slideModal.open().then(function () {
            return _this2.handleToggle(true);
          }).then(function (active) {
            resolve(active);
          })["catch"](function (e) {
            // console.log(e)
            reject(e);
          });
        });
      });
    });
  };

  _proto.renderIcon = function renderIcon(active) {
    return active ? this.props.activeIcon : this.props.inactiveIcon;
  };

  _proto.render = function render() {
    var _this3 = this;

    var _this$props2 = this.props,
        style = _this$props2.style,
        disabled = _this$props2.disabled,
        label = _this$props2.label,
        cancelable = _this$props2.cancelable;
    var _this$state = this.state,
        active = _this$state.active,
        offsetY = _this$state.offsetY;
    var fontSize = StyleSheet.flatten(pickerStyles.btnText).fontSize;
    var fontColor = StyleSheet.flatten(pickerStyles.btnText).color;

    if (active) {
      fontColor = variables.hyBrandPrimaryDark;
    }

    return /*#__PURE__*/React.createElement(View, {
      ref: function ref(c) {
        _this3.trigger = c;
      },
      style: [style],
      collapsable: false
    }, /*#__PURE__*/React.createElement(TouchableOpacity, {
      onPress: this.handlePress,
      activeOpacity: disabled ? 1 : variables.hyOpacity,
      style: pickerStyles.btnWrapperContainer
    }, typeof label === 'function' ? label(active) : /*#__PURE__*/React.createElement(View, {
      style: [pickerStyles.btnWrapper, {
        opacity: disabled ? 0.3 : 1
      }]
    }, /*#__PURE__*/React.createElement(Text, {
      style: [pickerStyles.btnText, {
        fontSize: fontSize,
        color: fontColor,
        marginRight: 3
      }]
    }, label), this.renderIcon(active))), /*#__PURE__*/React.createElement(SlideModal, {
      ref: function ref(c) {
        _this3.slideModal = c;
      },
      cancelable: cancelable,
      direction: 'down',
      offsetX: 0,
      offsetY: offsetY,
      onClosed: function onClosed() {
        if (_this3.state.active) {
          _this3.handleToggle(false)["catch"](function (e) {
            console.log(e);
          });
        }
      }
    }, /*#__PURE__*/React.createElement(View, {
      style: {
        width: window.width
      }
    }, this.props.children)));
  };

  return Picker;
}(React.Component);
Picker.defaultProps = {
  label: '请选择',
  activeIcon: /*#__PURE__*/React.createElement(Icon, {
    source: require("../../common/images/icons/angle-up.png"),
    size: 12,
    tintColor: variables.hyBrandPrimaryDark
  }),
  inactiveIcon: /*#__PURE__*/React.createElement(Icon, {
    source: require("../../common/images/icons/angle-down.png"),
    size: 12,
    tintColor: variables.hyGrayBase
  }),
  disabled: false,
  cancelable: true,
  style: {},
  onToggle: null
};