function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

import React from 'react';
import { View, Text } from 'react-native';
import { Modal } from '../Modal';
import tipStyles from './styles';
export var Tip = /*#__PURE__*/function (_Modal) {
  _inheritsLoose(Tip, _Modal);

  function Tip(props) {
    return _Modal.call(this, props) || this;
  }

  var _proto = Tip.prototype;

  _proto.init = function init(props, syncTag) {
    var positions = [['top', 'left'], ['top'], ['top', 'right'], ['left'], ['center'], ['right'], ['bottom', 'left'], ['bottom'], ['bottom', 'right']];
    var position = typeof props.position === 'string' ? [props.position] : props.position;
    var propsPositionValid = positions.some(function (item) {
      var str1 = item.join();
      var str2 = item.reverse().join();
      var str3 = position.join();

      if (str3 === str1 || str3 === str2) {
        return true;
      }
    });

    if (!propsPositionValid) {
      throw new Error("Tip \u7EC4\u4EF6\u7684 position \u53C2\u6570\u65E0\u6548");
    }

    var alignItems = position.indexOf('top') !== -1 ? 'flex-start' : position.indexOf('bottom') !== -1 ? 'flex-end' : 'center';
    var justifyContent = position.indexOf('left') !== -1 ? 'flex-start' : position.indexOf('right') !== -1 ? 'flex-end' : 'center';

    var tmpProps = _objectSpread(_objectSpread({}, props), {}, {
      containerStyle: {
        alignItems: alignItems,
        justifyContent: justifyContent
      }
    });

    Modal.prototype.init.call(this, tmpProps, syncTag);
  };

  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    if (nextProps.position !== this.props.position) {
      this.init(nextProps, false);
    } else {
      Modal.prototype.componentWillReceiveProps.call(this, nextProps);
    }
  };

  _proto.getContent = function getContent(c) {
    var inner = /*#__PURE__*/React.createElement(View, {
      style: tipStyles.container
    }, this.getBody(c));
    return Modal.prototype.getContent.call(this, inner);
  };

  _proto.getBody = function getBody(c) {
    var _this$props = this.props,
        body = _this$props.body,
        custom = _this$props.custom;
    var tmp = c == null ? body : c;

    if (! /*#__PURE__*/React.isValidElement(tmp)) {
      tmp = /*#__PURE__*/React.createElement(Text, {
        style: tipStyles.info
      }, String(tmp));
    }

    if (!custom) {
      return /*#__PURE__*/React.createElement(View, {
        style: tipStyles.body
      }, tmp);
    }

    return body;
  };

  _proto.open = function open(c) {
    var _this = this;

    return Modal.prototype.open.call(this, c).then(function (ret) {
      if (typeof _this.props.duration === 'number') {
        setTimeout(function () {
          _this.close()["catch"](function (e) {
            return null;
          });
        }, _this.props.duration);
      }

      return ret;
    });
  };

  _proto.render = function render() {
    return null;
  };

  return Tip;
}(Modal);
Tip.defaultProps = _objectSpread(_objectSpread({}, Modal.defaultProps), {}, {
  position: 'center',
  // style: {
  //   marginHorizontal: 40,
  //   marginVertical: 90,
  // },
  cancelable: true,
  backdropColor: 'rgba(0, 0, 0, 0)',
  body: 'hello world',
  duration: null,
  custom: false
});
Tip.tipInstance = null;

Tip.show = function (msg, duration, cancelable, position) {
  Tip.tipInstance = new Tip(_objectSpread(_objectSpread({}, Tip.defaultProps), {}, {
    position: position || Tip.defaultProps.position,
    body: msg,
    cancelable: typeof cancelable === 'boolean' ? cancelable : true,
    duration: Number(duration) || 2000
  }));
  return Tip.tipInstance.open();
};

Tip.view = function (elm, duration, cancelable, position) {
  if (! /*#__PURE__*/React.isValidElement(elm)) {
    console.warn('arg[0] must be a ReactElement.');
    return;
  }

  Tip.tipInstance = new Tip(_objectSpread(_objectSpread({}, Tip.defaultProps), {}, {
    position: position || Tip.defaultProps.position,
    body: elm,
    cancelable: typeof cancelable === 'boolean' ? cancelable : true,
    duration: Number(duration) || 2000,
    custom: true
  }));
  return Tip.tipInstance.open();
};

Tip.hide = function () {
  return Tip.tipInstance.close();
};