function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import { StyleSheet, View, PanResponder } from 'react-native';
import { Icon } from '../Icon';
import styles from './styles';
import variables from '../../common/styles/variables';
var rateStyles = StyleSheet.create(styles);
export var Rate = /*#__PURE__*/function (_Component) {
  _inheritsLoose(Rate, _Component);

  function Rate(props) {
    var _this;

    _this = _Component.call(this, props) || this;
    _this.panResponder = null;
    _this.containerView = null;

    _this.createPanResponder();

    return _this;
  }

  var _proto = Rate.prototype;

  _proto.validateProps = function validateProps(props) {
    var value = props.value;
    var tmpValue = value == null ? 0 : value;
    tmpValue = Number(tmpValue);

    if (isNaN(tmpValue)) {
      throw Error('Rate 组件请提供有效的 value 参数');
    }

    var integer = parseInt(tmpValue, 10);

    if (tmpValue - integer !== 0 && tmpValue - integer !== 0.5) {
      throw Error('Rate 组件请提供有效的 value 参数');
    }
  };

  _proto.render = function render() {
    var _this2 = this;

    this.validateProps(this.props);
    return /*#__PURE__*/React.createElement(View, {
      ref: function ref(c) {
        _this2.containerView = c;
      },
      style: [rateStyles.wrapper, this.props.style],
      collapsable: false
    }, /*#__PURE__*/React.createElement(View, _extends({
      collapsable: false,
      style: {
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        zIndex: 1
      }
    }, this.panResponder.panHandlers)), this.renderIcons(this.props.value));
  };

  _proto.renderIcons = function renderIcons(value) {
    var _this$props = this.props,
        _this$props$icons = _this$props.icons,
        half = _this$props$icons.half,
        full = _this$props$icons.full,
        empty = _this$props$icons.empty,
        total = _this$props.total,
        iconSpace = _this$props.iconSpace,
        iconSize = _this$props.iconSize,
        iconColor = _this$props.iconColor;
    var ret = [];

    for (var i = 0; i < total; i++) {
      var marginRight = i === total - 1 ? 0 : iconSpace;

      if (half && value > i && value < i + 1) {
        var tmpProps = _objectSpread(_objectSpread({}, half.props), {}, {
          key: i,
          style: [{
            marginRight: marginRight
          }, half.props.style]
        });

        if (half && half.type && half.type.displayName === 'Icon') {
          tmpProps.size = iconSize;
          tmpProps.tintColor = iconColor;
        }

        ret.push( /*#__PURE__*/React.cloneElement(half, tmpProps));
      } else if (value >= i + 1) {
        var _tmpProps = _objectSpread(_objectSpread({}, full.props), {}, {
          key: i,
          style: [{
            marginRight: marginRight
          }, full.props.style]
        });

        if (full && full.type && full.type.displayName === 'Icon') {
          _tmpProps.size = iconSize;
          _tmpProps.tintColor = iconColor;
        }

        ret.push( /*#__PURE__*/React.cloneElement(full, _tmpProps));
      } else {
        var _tmpProps2 = _objectSpread(_objectSpread({}, empty.props), {}, {
          key: i,
          style: [{
            marginRight: marginRight
          }, empty.props.style]
        });

        if (empty && empty.type && empty.type.displayName === 'Icon') {
          _tmpProps2.size = iconSize;
          _tmpProps2.tintColor = iconColor;
        }

        ret.push( /*#__PURE__*/React.cloneElement(empty, _tmpProps2));
      }
    }

    return ret;
  };

  _proto.getValue = function getValue(pageX) {
    var _this3 = this;

    var p = new Promise(function (resolve) {
      _this3.containerView && _this3.containerView.measure(function (ox, oy, width, height, px, py) {
        resolve(px);
      });
    });
    return p.then(function (containerViewX) {
      var _this3$props = _this3.props,
          iconSize = _this3$props.iconSize,
          iconSpace = _this3$props.iconSpace,
          total = _this3$props.total,
          enableHalf = _this3$props.enableHalf;
      var locationX = pageX - containerViewX; // console.log(pageX, containerViewX)

      if (locationX <= 0) {
        return 0;
      }

      var unitWidth = iconSize + iconSpace;
      var value = Math.floor(locationX / unitWidth);

      if (value >= total) {
        return total;
      }

      var rest = locationX - unitWidth * value;

      if (rest > 0 && rest < iconSize / 2) {
        if (!enableHalf) {
          value = value + 1;
        } else {
          value = value + 0.5;
        }
      }

      if (rest > iconSize / 2) {
        value = value + 1;
      }

      return value;
    });
  };

  _proto.handleChange = function handleChange(value) {
    this.props.onChange && this.props.onChange(value);
  };

  _proto.createPanResponder = function createPanResponder() {
    var _this4 = this;

    this.panResponder = PanResponder.create({
      onStartShouldSetPanResponder: function onStartShouldSetPanResponder() {
        return true;
      },
      onPanResponderGrant: function onPanResponderGrant(event, gesture) {
        _this4.getValue(event.nativeEvent.pageX).then(function (value) {
          _this4.handleChange(value);
        });
      },
      onPanResponderMove: function onPanResponderMove(event, gesture) {
        _this4.getValue(event.nativeEvent.pageX).then(function (value) {
          _this4.handleChange(value);
        });
      },
      onPanResponderRelease: function onPanResponderRelease(event) {}
    });
  };

  return Rate;
}(Component);
Rate.defaultProps = {
  total: 5,
  icons: {
    empty: /*#__PURE__*/React.createElement(Icon, {
      source: require("../../common/images/icons/star-o.png")
    }),
    full: /*#__PURE__*/React.createElement(Icon, {
      source: require("../../common/images/icons/star.png")
    }),
    half: /*#__PURE__*/React.createElement(Icon, {
      source: require("../../common/images/icons/star-half-o.png")
    })
  },
  iconSize: 20,
  iconSpace: 4,
  enableHalf: true,
  iconColor: variables.hyBrandPrimaryDark
};