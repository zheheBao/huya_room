function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { StyleSheet, PixelRatio } from 'react-native';
import variables from '../../common/styles/variables';
var px = 1 / PixelRatio.get();
var buttons = {
  defaultWrapper: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: variables.hyHSpacingL,
    paddingVertical: variables.hyVSpacingL,
    backgroundColor: '#fff'
  },
  defaultText: {
    fontSize: variables.hyFontSizeM,
    color: variables.hyGrayDarker
  }
};
export default StyleSheet.create({
  container: {
    backgroundColor: '#fff',
    borderRadius: variables.hyRadiusXS,
    overflow: 'hidden'
  },
  header: {
    alignItems: 'center',
    paddingTop: 25
  },
  title: {
    fontSize: variables.hyFontSizeL,
    fontWeight: 'bold',
    color: variables.hyGrayDarker
  },
  body: {
    flexDirection: 'row',
    paddingHorizontal: 24,
    paddingTop: 10,
    paddingBottom: 24 // paddingVertical: padding.verticalBase,

  },
  bodyText: {
    flex: 1,
    textAlign: 'center',
    color: variables.hyGrayDarker,
    // ...mixins.adjustFont(14, 1.2)
    fontSize: 14,
    lineHeight: 18,
    textAlignVertical: 'center'
  },
  footer: {
    flexDirection: 'row',
    alignItems: 'center',
    borderTopWidth: 1 * px,
    borderTopColor: variables.hyBorderColor
  },
  btnConfirmWrapper: _objectSpread(_objectSpread({}, buttons.defaultWrapper), {}, {
    borderWidth: 0,
    backgroundColor: '#fff'
  }),
  btnConfirmText: _objectSpread(_objectSpread({}, buttons.defaultText), {}, {
    color: variables.hyBrandPrimaryDark,
    fontSize: variables.hyFontSizeL,
    fontWeight: 'bold'
  }),
  btnCancelWrapper: _objectSpread(_objectSpread({}, buttons.defaultWrapper), {}, {
    borderWidth: 0
  }),
  btnCancelText: _objectSpread(_objectSpread({}, buttons.defaultText), {}, {
    fontSize: variables.hyFontSizeL,
    color: variables.hyGrayDark
  })
});