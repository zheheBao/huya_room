function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

import React from 'react';
import { View, Text, TouchableOpacity, PixelRatio } from 'react-native';
import { Modal } from '../Modal';
import dialogStyles from './styles';
import variables from '../../common/styles/variables';
var px = 1 / PixelRatio.get();
export var Dialog = /*#__PURE__*/function (_Modal) {
  _inheritsLoose(Dialog, _Modal);

  function Dialog(props) {
    return _Modal.call(this, props) || this;
  }

  var _proto = Dialog.prototype;

  _proto.getContent = function getContent() {
    var styles = dialogStyles;
    var inner = /*#__PURE__*/React.createElement(View, {
      style: styles.container
    }, this.getHeader(), this.getBody(), this.getFooter());
    return Modal.prototype.getContent.call(this, inner);
  };

  _proto.getHeader = function getHeader() {
    var _this$props = this.props,
        header = _this$props.header,
        title = _this$props.title,
        titleStyle = _this$props.titleStyle;

    if (header && /*#__PURE__*/React.isValidElement(header)) {
      return header;
    }

    return /*#__PURE__*/React.createElement(View, {
      style: dialogStyles.header
    }, /*#__PURE__*/React.createElement(Text, {
      style: [dialogStyles.title, titleStyle]
    }, title));
  };

  _proto.getBody = function getBody() {
    var _this$props2 = this.props,
        body = _this$props2.body,
        bodyText = _this$props2.bodyText,
        bodyTextStyle = _this$props2.bodyTextStyle;
    return /*#__PURE__*/React.isValidElement(body) ? body : /*#__PURE__*/React.createElement(View, {
      style: dialogStyles.body
    }, /*#__PURE__*/React.createElement(Text, {
      style: [dialogStyles.bodyText, bodyTextStyle],
      numberOfLines: 0
    }, bodyText));
  };

  _proto.getFooter = function getFooter() {
    var _this = this;

    var styles = dialogStyles;
    var _this$props3 = this.props,
        cancelLabel = _this$props3.cancelLabel,
        cancelLabelText = _this$props3.cancelLabelText,
        cancelLabelTextStyle = _this$props3.cancelLabelTextStyle,
        cancelCallback = _this$props3.cancelCallback,
        confirmLabel = _this$props3.confirmLabel,
        confirmLabelText = _this$props3.confirmLabelText,
        confirmLabelTextStyle = _this$props3.confirmLabelTextStyle,
        confirmCallback = _this$props3.confirmCallback,
        operationsLayout = _this$props3.operationsLayout,
        operations = _this$props3.operations;
    operations = operations || [];

    if (!operations.length) {
      if (cancelLabel || cancelLabelText || cancelCallback) {
        operations.push({
          label: cancelLabel,
          labelText: cancelLabelText,
          labelTextStyle: cancelLabelTextStyle,
          type: 'cancel',
          onPress: cancelCallback
        });
      }

      if (confirmLabel || confirmLabelText || confirmCallback) {
        operations.push({
          label: confirmLabel,
          labelText: confirmLabelText,
          labelTextStyle: confirmLabelTextStyle,
          type: 'confirm',
          onPress: confirmCallback
        });
      }
    }

    var length = operations.length;

    if (!length) {
      return null;
    }

    var operationEls = [];
    operations.forEach(function (item, index) {
      operationEls.push( /*#__PURE__*/React.createElement(TouchableOpacity, {
        key: index,
        style: {
          flexDirection: 'row',
          flex: operationsLayout === 'column' ? null : 1
        },
        activeOpacity: variables.hyOpacity,
        onPress: function onPress() {
          item.onPress && item.onPress(item, index);

          _this.close();
        }
      }, /*#__PURE__*/React.isValidElement(item.label) ? item.label : item.labelText ? /*#__PURE__*/React.createElement(View, {
        style: [item.type === 'cancel' ? styles.btnCancelWrapper : styles.btnConfirmWrapper]
      }, /*#__PURE__*/React.createElement(Text, {
        style: [item.type === 'cancel' ? styles.btnCancelText : styles.btnConfirmText, item.labelTextStyle]
      }, item.labelText)) : null));

      if (index < length - 1) {
        var _ref;

        operationEls.push( /*#__PURE__*/React.createElement(View, {
          key: index + 'x',
          style: {
            flexDirection: operationsLayout === 'column' ? 'row' : 'column'
          }
        }, /*#__PURE__*/React.createElement(View, {
          style: (_ref = {
            flex: 1
          }, _ref[operationsLayout === 'column' ? 'height' : 'width'] = 1 * px, _ref.backgroundColor = variables.hyBorderColorDark, _ref)
        })));
      }
    });
    return /*#__PURE__*/React.createElement(View, {
      style: [styles.footer, {
        flexDirection: operationsLayout
      }]
    }, operationEls);
  };

  _proto.render = function render() {
    return null;
  };

  return Dialog;
}(Modal);
Dialog.defaultProps = _objectSpread(_objectSpread({}, Modal.defaultProps), {}, {
  style: {
    flex: 1,
    marginHorizontal: 40
  },
  title: '标题',
  titleStyle: {},
  header: null,
  bodyText: '内容',
  bodyTextStyle: {},
  body: null,
  cancelable: true,
  cancelLabel: null,
  cancelLabelText: '取消',
  cancelLabelTextStyle: {},
  cancelCallback: null,
  confirmLabel: null,
  confirmLabelText: '确定',
  confirmLabelTextStyle: {},
  confirmCallback: null,
  operationsLayout: 'row',
  operations: null
});