function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

import React from 'react';
import { Text, TouchableOpacity, Animated } from 'react-native';
import buttonStyles from './styles';
export { buttonStyles };
import variables from '../../common/styles/variables';
import { FadeAnimated } from '../../common/animations';
var fontSizeMap = {
  lg: variables.buttonLFontSize,
  md: variables.buttonMFontSize,
  sm: variables.buttonSFontSize
};
var paddingMap = {
  lg: {
    paddingHorizontal: variables.buttonLHSpacing,
    paddingVertical: variables.buttonLVSpacing
  },
  md: {
    paddingHorizontal: variables.buttonMHSpacing,
    paddingVertical: variables.buttonMVSpacing
  },
  sm: {
    paddingHorizontal: variables.buttonSHSpacing,
    paddingVertical: variables.buttonSVSpacing
  }
};
export var Button = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Button, _React$Component);

  function Button(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.containerRef = null;
    _this.animated = null;

    _this.handleLayout = function (e) {
      var width = e.nativeEvent.layout.width;

      _this.setState({
        buttonWidth: width
      });
    };

    _this.state = {
      buttonWidth: 0
    };

    if (variables.buttonEnableAnimated) {
      _this.animated = new FadeAnimated({
        scaleList: [0, 1],
        opacityList: [1, 0],
        opacityDuration: 1000
      });
    }

    return _this;
  }

  var _proto = Button.prototype;

  _proto.componentDidMount = function componentDidMount() {};

  _proto.measure = function measure(cb) {
    this.containerRef.measure(cb);
  };

  _proto.handlePress = function handlePress() {
    var _this$props = this.props,
        disabled = _this$props.disabled,
        onPress = _this$props.onPress;

    if (disabled) {
      return;
    }

    this.animated && this.animated.toIn();

    if (typeof onPress === 'function') {
      onPress();
    }
  };

  _proto.render = function render() {
    var _this2 = this;

    var _this$props2 = this.props,
        type = _this$props2.type,
        disabled = _this$props2.disabled,
        style = _this$props2.style,
        textStyle = _this$props2.textStyle,
        size = _this$props2.size,
        children = _this$props2.children,
        textColorInverse = _this$props2.textColorInverse,
        testID = _this$props2.testID;
    var styleWrapper = buttonStyles[type + 'Wrapper'] || buttonStyles.defaultWrapper;
    var styleText = buttonStyles[type + 'Text'] || buttonStyles.defaultText;
    var inverseStyle = textColorInverse && type !== 'default' && type !== 'text' ? {
      color: variables.hyGrayBase
    } : {};
    var animatedStyle = {};

    if (this.animated) {
      animatedStyle = {
        transform: [{
          scale: this.animated.getState().scale
        }],
        opacity: this.animated.getState().opacity
      };
    }

    return /*#__PURE__*/React.createElement(TouchableOpacity, {
      testID: testID,
      ref: function ref(c) {
        return _this2.containerRef = c;
      },
      style: [styleWrapper, _objectSpread({
        opacity: disabled ? variables.buttonActiveOpacity : 1
      }, paddingMap[size] || paddingMap['md']), style],
      disabled: disabled,
      onPress: function onPress() {
        return _this2.handlePress();
      },
      activeOpacity: disabled ? 1 : variables.buttonActiveOpacity,
      onLayout: this.handleLayout
    }, /*#__PURE__*/React.isValidElement(children) ? children : /*#__PURE__*/React.createElement(Text, {
      style: [styleText, {
        fontSize: fontSizeMap[size] || fontSizeMap['md']
      }, inverseStyle, textStyle]
    }, children), /*#__PURE__*/React.createElement(Animated.View, {
      style: [{
        position: 'absolute',
        zIndex: -1,
        width: this.state.buttonWidth,
        height: this.state.buttonWidth,
        borderRadius: this.state.buttonWidth,
        backgroundColor: 'rgba(0, 0, 0, 0.1)',
        opacity: 0
      }, animatedStyle]
    }));
  };

  return Button;
}(React.Component);
Button.defaultProps = {
  style: {},
  textStyle: {},
  textColorInverse: false,
  type: 'default',
  size: 'md',
  disabled: false,
  onPress: null
};