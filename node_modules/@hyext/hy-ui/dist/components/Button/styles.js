function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { StyleSheet } from 'react-native';
import variables from '../../common/styles/variables';
var defaultWrapper = {
  flexDirection: 'row',
  justifyContent: 'center',
  alignItems: 'center',
  paddingHorizontal: variables.hyHSpacingL,
  paddingVertical: variables.hyVSpacingM,
  borderWidth: StyleSheet.hairlineWidth,
  borderColor: variables.hyBorderColorDarker,
  borderRadius: variables.buttonBorderRadius,
  backgroundColor: '#fff',
  overflow: 'hidden'
};
var defaultText = {
  fontSize: variables.hyFontSizeM,
  color: variables.hyGrayBase
};

var primaryWrapper = _objectSpread(_objectSpread({}, defaultWrapper), {}, {
  borderColor: variables.hyBrandPrimary,
  backgroundColor: variables.hyBrandPrimary
});

var primaryText = _objectSpread(_objectSpread({}, defaultText), {}, {
  color: '#ffffff'
});

var dangerWrapper = _objectSpread(_objectSpread({}, defaultWrapper), {}, {
  borderColor: variables.hyBrandDanger,
  backgroundColor: variables.hyBrandDanger
});

var dangerText = _objectSpread(_objectSpread({}, defaultText), {}, {
  color: '#ffffff'
});

var warningWrapper = _objectSpread(_objectSpread({}, defaultWrapper), {}, {
  borderColor: variables.hyBrandWarning,
  backgroundColor: variables.hyBrandWarning
});

var warningText = _objectSpread(_objectSpread({}, defaultText), {}, {
  color: '#ffffff'
});

var successWrapper = _objectSpread(_objectSpread({}, defaultWrapper), {}, {
  borderColor: variables.hyBrandSuccess,
  backgroundColor: variables.hyBrandSuccess
});

var successText = _objectSpread(_objectSpread({}, defaultText), {}, {
  color: '#ffffff'
});

var infoWrapper = _objectSpread(_objectSpread({}, defaultWrapper), {}, {
  borderColor: variables.hyBrandInfo,
  backgroundColor: variables.hyBrandInfo
});

var infoText = _objectSpread(_objectSpread({}, defaultText), {}, {
  color: '#ffffff'
});

var textWrapper = _objectSpread(_objectSpread({}, defaultWrapper), {}, {
  borderColor: 'transparent',
  backgroundColor: 'transparent'
});

var textText = _objectSpread(_objectSpread({}, defaultText), {}, {
  color: variables.hyBrandInfo
});

export default StyleSheet.create({
  defaultWrapper: defaultWrapper,
  defaultText: defaultText,
  primaryWrapper: primaryWrapper,
  primaryText: primaryText,
  dangerWrapper: dangerWrapper,
  dangerText: dangerText,
  successWrapper: successWrapper,
  successText: successText,
  warningWrapper: warningWrapper,
  warningText: warningText,
  infoWrapper: infoWrapper,
  infoText: infoText,
  textWrapper: textWrapper,
  textText: textText
});