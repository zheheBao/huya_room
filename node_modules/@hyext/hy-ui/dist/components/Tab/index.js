function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

import React from 'react';
import { View, Text, TouchableOpacity, StyleSheet, ScrollView } from 'react-native';
import variables from '../../common/styles/variables';
import tabStyle from './styles';
var styles = StyleSheet.create(tabStyle);
export var Tab = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Tab, _React$Component);

  function Tab() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this._itemLayouts = [];
    _this._scrollerContentOffsetX = 0;

    _this.renderItemContent = function (item, index, active) {
      return [/*#__PURE__*/React.createElement(View, {
        key: index
      }, /*#__PURE__*/React.createElement(Text, {
        style: [styles.text, active ? {
          color: _this.props.activeColor,
          fontWeight: 'bold'
        } : {}, item.disabled ? {
          color: variables.hyGrayLighter
        } : {}]
      }, item.label)), /*#__PURE__*/React.createElement(View, {
        key: index + 'l',
        style: [styles.line, active ? {
          backgroundColor: _this.props.activeColor
        } : {}]
      })];
    };

    _this.handleLayoutItem = function (index, item, e) {
      var existed = _this._itemLayouts.some(function (layoutItem) {
        return layoutItem.index === index;
      });

      !existed && e && e.nativeEvent && _this._itemLayouts.push({
        index: index,
        layout: e.nativeEvent.layout
      });
    };

    _this.handleScroll = function (e) {
      e && e.nativeEvent && e.nativeEvent.contentOffset && (_this._scrollerContentOffsetX = e.nativeEvent.contentOffset.x);
    };

    return _this;
  }

  var _proto = Tab.prototype;

  _proto.scrollTo = function scrollTo(index) {
    var _this2 = this;

    if (index === void 0) {
      index = 0;
    }

    if (!this.props.scrollable) {
      return;
    }

    this._container.measure(function (x, y, width) {
      var distance = _this2.calucateDistance(index, _this2._scrollerContentOffsetX, width);

      if (distance == null) {
        return;
      }

      _this2._scroller.scrollTo({
        x: distance,
        y: 0,
        animated: true
      });
    });
  };

  _proto.calucateDistance = function calucateDistance(index, baseX, containerWidth) {
    var distance = null; // 对缓存的 _itemLayouts 进行排序

    var layouts = this._itemLayouts.sort(function (a, b) {
      return a.index - b.index;
    });

    if (!layouts[index] || !layouts[index].layout) {
      return distance;
    }

    var targetX = layouts[index].layout.x;
    var targetWidth = layouts[index].layout.width;
    var deltaX = null;

    if (baseX <= 0) {
      deltaX = -baseX + targetX + targetWidth - containerWidth;

      if (deltaX >= 0) {
        distance = baseX + deltaX;
      }
    }

    if (baseX > 0) {
      deltaX = -baseX + targetX + targetWidth;

      if (deltaX <= 0) {
        distance = targetX;
      } else {
        if (deltaX < targetWidth) {
          distance = targetX;
        } else {
          deltaX = deltaX - containerWidth;

          if (deltaX > 0) {
            distance = baseX + deltaX;
          }
        }
      }
    }

    return distance;
  };

  _proto.renderItems = function renderItems() {
    var _this3 = this;

    var _this$props = this.props,
        dataItemContainerStyle = _this$props.dataItemContainerStyle,
        dataItemStyle = _this$props.dataItemStyle,
        value = _this$props.value,
        _this$props$data = _this$props.data,
        data = _this$props$data === void 0 ? [] : _this$props$data,
        onChange = _this$props.onChange,
        renderItem = _this$props.renderItem;
    return data.map(function (item, index) {
      var active = value === item.value;
      return /*#__PURE__*/React.createElement(TouchableOpacity, {
        style: [{
          flex: 1
        }, dataItemContainerStyle],
        key: index,
        activeOpacity: 1,
        onPress: function onPress() {
          if (item.disabled) {
            return;
          }

          onChange && onChange(item, index);
        },
        onLayout: _this3.handleLayoutItem.bind(_this3, index, item)
      }, renderItem ? renderItem(item, index, active) : /*#__PURE__*/React.createElement(View, {
        style: [styles.item, dataItemStyle]
      }, _this3.renderItemContent(item, index, active)));
    });
  };

  _proto.render = function render() {
    var _this4 = this;

    var _this$props2 = this.props,
        scrollable = _this$props2.scrollable,
        style = _this$props2.style,
        dataContainerStyle = _this$props2.dataContainerStyle;
    var itemViews = this.renderItems();
    return /*#__PURE__*/React.createElement(View, {
      ref: function ref(c) {
        _this4._container = c;
      },
      style: [styles.container, style]
    }, scrollable ? /*#__PURE__*/React.createElement(ScrollView, {
      ref: function ref(c) {
        _this4._scroller = c;
      },
      horizontal: true,
      showsHorizontalScrollIndicator: false,
      scrollEventThrottle: 0,
      onScroll: this.handleScroll
    }, /*#__PURE__*/React.createElement(View, {
      collapsable: false,
      style: [styles.content, dataContainerStyle]
    }, itemViews)) : /*#__PURE__*/React.createElement(View, {
      style: [styles.content, dataContainerStyle]
    }, itemViews));
  };

  return Tab;
}(React.Component);
Tab.defaultProps = {
  activeColor: variables.hyGrayBase,
  value: null,
  data: [],
  onChange: null,
  scrollable: false
};