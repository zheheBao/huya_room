function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import { Text, View, StyleSheet, TouchableOpacity, ScrollView } from 'react-native';
import cascaderStyles from './styles';
var styles = StyleSheet.create(cascaderStyles);
import { Icon } from '../Icon';
import variables from '../../common/styles/variables';
import Tree from '../../common/utils/Tree';
export var Cascader = /*#__PURE__*/function (_Component) {
  _inheritsLoose(Cascader, _Component);

  Cascader.resetChecked = function resetChecked(tree, item, checkType, checked, fieldKeys) {
    var tmpTree = [].concat(tree);

    if (checkType === 'checkbox') {// TODO
    }

    if (checkType === 'radio') {
      tmpTree = resetRadio(tmpTree, item, checked, fieldKeys);
    }

    return tmpTree;

    function resetRadio(tree, item, checked, fieldKeys) {
      var tmpTree = [].concat(tree);
      tmpTree = tmpTree.map(function (treeItem) {
        if (treeItem[fieldKeys.idKey] === item[fieldKeys.idKey]) {
          var _objectSpread2;

          return _objectSpread(_objectSpread({}, treeItem), {}, (_objectSpread2 = {}, _objectSpread2[fieldKeys.checkedKey] = true, _objectSpread2));
        } else {
          var _objectSpread3;

          return _objectSpread(_objectSpread({}, treeItem), {}, (_objectSpread3 = {}, _objectSpread3[fieldKeys.checkedKey] = false, _objectSpread3));
        }
      });
      return tmpTree;
    }
  };

  Cascader.getCheckedInfo = function getCheckedInfo(tree, checkType, fieldKeys) {
    var checkedValue = [];
    var checkedResult = [];

    if (checkType === 'checkbox') {// TODO
    }

    if (checkType === 'radio') {
      tree.some(function (treeItem) {
        if (treeItem[fieldKeys.checkedKey]) {
          checkedValue.push(treeItem[fieldKeys.idKey]);
          return true;
        }

        return false;
      });
    }

    checkedValue.forEach(function (valueItem, valueIndex) {
      var target = tree.filter(function (treeItem) {
        return treeItem[fieldKeys.idKey] === valueItem;
      })[0];
      var ancestors = Cascader.recursiveAncestors(tree, target, fieldKeys);
      ancestors.push(target);
      checkedResult[valueIndex] = ancestors;
    });
    return {
      checkedValue: checkedValue,
      checkedResult: checkedResult
    };
  };

  Cascader.recursiveAncestors = function recursiveAncestors(tree, item, fieldKeys, ret) {
    ret = ret || [];
    var parentItem = tree.filter(function (treeItem) {
      return treeItem[fieldKeys.idKey] === item[fieldKeys.pIdKey];
    })[0];

    if (parentItem) {
      ret = ret.concat();
      ret.unshift(parentItem);
      return Cascader.recursiveAncestors(tree, parentItem, fieldKeys, ret);
    } else {
      return ret;
    }
  };

  function Cascader(props) {
    var _this;

    _this = _Component.call(this, props) || this;

    _this.handlePress = function (item, index) {
      var fieldKeys = _this.getFieldKeys();

      var tree = _this.state.tree;

      if (item[fieldKeys.activeKey]) {
        return;
      }

      if (item[fieldKeys.disabledKey]) {
        return;
      }

      var tmpTree = _this.resetActive(tree, item, fieldKeys);

      tmpTree = Cascader.resetChecked(tmpTree, item, 'radio', true, fieldKeys);

      var _Cascader$getCheckedI = Cascader.getCheckedInfo(tmpTree, 'radio', fieldKeys),
          checkedValue = _Cascader$getCheckedI.checkedValue,
          checkedResult = _Cascader$getCheckedI.checkedResult;

      var menu = _this.getMenu(tmpTree, fieldKeys);

      _this.props.onChange && _this.props.onChange(checkedValue, checkedResult);

      _this.setState({
        tree: tmpTree,
        menu: menu
      });
    };

    _this.state = _objectSpread(_objectSpread({}, _this.state), _this.init(props));
    return _this;
  }

  var _proto = Cascader.prototype;

  _proto.init = function init(props) {
    var fieldKeys = this.getFieldKeys(props);
    var data = props.data,
        dataStructureType = props.dataStructureType;
    var value = props.value || [];
    var tree = new Tree(_objectSpread(_objectSpread({
      type: dataStructureType
    }, fieldKeys), {}, {
      data: data
    })).getData();
    /**
     * 重置 checked 状态
     */

    value.forEach(function (valueItem) {
      var target = tree.filter(function (treeItem) {
        return treeItem[fieldKeys.idKey] === valueItem;
      })[0];

      if (!target) {
        console.log("\u503C" + valueItem + "\u5728\u6570\u636E\u96C6\u5408\u4E2D\u4E0D\u5B58\u5728");
        return;
      }

      tree = Cascader.resetChecked(tree, target, 'radio', true, fieldKeys);
    });
    /**
     * 重置 active 状态
     */

    var activeItem;

    if (value[0] != null) {
      activeItem = tree.filter(function (treeItem) {
        return treeItem[fieldKeys.idKey] === value[0];
      })[0];
    }

    tree = this.resetActive(tree, activeItem, fieldKeys);
    var menu = this.getMenu(tree, fieldKeys);
    return {
      tree: tree,
      menu: menu
    };
  };

  _proto.resetActive = function resetActive(tree, activeItem, fieldKeys) {
    if (!activeItem) {
      return tree;
    }

    var tmpTree = [].concat(tree);
    tmpTree = tmpTree.map(function (treeItem) {
      var _objectSpread4;

      return _objectSpread(_objectSpread({}, treeItem), {}, (_objectSpread4 = {}, _objectSpread4[fieldKeys.activeKey] = false, _objectSpread4));
    });
    recursive(activeItem);
    return tmpTree;

    function recursive(activeItem) {
      tmpTree = tmpTree.map(function (treeItem) {
        if (treeItem[fieldKeys.idKey] === activeItem[fieldKeys.idKey]) {
          var _objectSpread5;

          return _objectSpread(_objectSpread({}, treeItem), {}, (_objectSpread5 = {}, _objectSpread5[fieldKeys.activeKey] = true, _objectSpread5));
        } else {
          return treeItem;
        }
      });
      var parentItem = tmpTree.filter(function (treeItem) {
        return treeItem[fieldKeys.idKey] === activeItem[fieldKeys.pIdKey];
      })[0];

      if (parentItem) {
        recursive(parentItem);
      }
    }
  };

  _proto.getMenu = function getMenu(tree, fieldKeys) {
    var menu = [tree.filter(function (treeItem) {
      return treeItem[fieldKeys.pIdKey] == null;
    })];
    recursive(menu[0]);
    return menu;

    function recursive(list) {
      list.some(function (item) {
        if (item[fieldKeys.activeKey]) {
          var tmpList = tree.filter(function (treeItem) {
            return treeItem[fieldKeys.pIdKey] === item[fieldKeys.idKey];
          });

          if (tmpList && tmpList.length) {
            menu.push(tmpList);
            recursive(tmpList);
          }

          return true;
        }

        return false;
      });
    }
  };

  _proto.getFieldKeys = function getFieldKeys(props) {
    props = props || this.props;
    var _props = props,
        fieldKeys = _props.fieldKeys;
    return {
      idKey: fieldKeys.idKey || 'id',
      pIdKey: fieldKeys.pIdKey || 'pId',
      labelKey: fieldKeys.labelKey || 'label',
      childrenKey: fieldKeys.childrenKey || 'children',
      activeKey: fieldKeys.activeKey || 'active',
      checkedKey: fieldKeys.checkedKey || 'checked',
      disabledKey: fieldKeys.disabledKey || 'disabled'
    };
  };

  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    if (nextProps.value !== this.props.value || nextProps.data !== this.props.data) {
      this.setState(_objectSpread({}, this.init(nextProps)));
    }
  };

  _proto.componentDidMount = function componentDidMount() {};

  _proto.renderMenuItem = function renderMenuItem(menuItem, menuIndex, menu) {
    var _this2 = this;

    var proportion = this.props.proportion;
    var style = {
      flex: proportion[menuIndex] || 1,
      borderRightColor: variables.hyBorderColor,
      borderRightWidth: menuIndex < menu.length - 1 ? StyleSheet.hairlineWidth : 0
    };
    return /*#__PURE__*/React.createElement(View, {
      style: style,
      key: menuIndex
    }, /*#__PURE__*/React.createElement(ScrollView, null, menuItem.map(function (item, index) {
      return _this2.renderItem(item, index);
    })));
  };

  _proto.renderItem = function renderItem(item, index) {
    var fieldKeys = this.getFieldKeys();
    var tree = this.state.tree;
    var isLeafNode = this.props.isLeafNode ? this.props.isLeafNode(item) : !(item && item[fieldKeys.childrenKey] && item[fieldKeys.childrenKey].length);
    var active = item[fieldKeys.activeKey];
    return /*#__PURE__*/React.createElement(TouchableOpacity, {
      key: index,
      onPress: this.handlePress.bind(this, item, index)
    }, this.props.renderItem ? this.props.renderItem(item, index) : /*#__PURE__*/React.createElement(View, {
      style: [styles.item, active ? {
        backgroundColor: variables.hyFillGray
      } : {}]
    }, /*#__PURE__*/React.createElement(Text, {
      style: [styles.itemText, active ? {
        color: variables.hyBrandPrimaryDark,
        fontWeight: 'bold'
      } : {}],
      ellipsizeMode: 'middle'
    }, item[fieldKeys.labelKey]), !isLeafNode ? /*#__PURE__*/React.createElement(Icon, {
      source: require("../../common/images/icons/angle-right.png"),
      size: variables.hyFontSizeM,
      tintColor: variables.hyGrayLighter
    }) : null));
  };

  _proto.render = function render() {
    var _this3 = this;

    var style = this.props.style;
    var menu = this.state.menu;
    return /*#__PURE__*/React.createElement(View, {
      style: [styles.container, style]
    }, menu.map(function (item, index) {
      return _this3.renderMenuItem(item, index, menu);
    }));
  };

  return Cascader;
}(Component);
Cascader.displayName = 'Cascader';
Cascader.defaultProps = {
  data: [],
  dataStructureType: 'nested',
  value: [],
  fieldKeys: {},
  proportion: [2, 1, 1],
  onChange: null,
  renderItem: null
};