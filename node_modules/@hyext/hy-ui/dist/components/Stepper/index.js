function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import { View, StyleSheet, TouchableOpacity, TextInput } from 'react-native';
import variables from '../../common/styles/variables';
import styles from './styles';
var stepperStyles = StyleSheet.create(styles);
export var Stepper = /*#__PURE__*/function (_Component) {
  _inheritsLoose(Stepper, _Component);

  function Stepper(props) {
    var _this;

    _this = _Component.call(this, props) || this;

    _this.onDecrease = function () {
      var _this$props = _this.props,
          value = _this$props.value,
          step = _this$props.step,
          min = _this$props.min;
      var newValue = _this.isEmpty(value) ? min + step : value;

      _this.changeValue(newValue, -step, 'decrease');
    };

    _this.onIncrease = function () {
      var _this$props2 = _this.props,
          value = _this$props2.value,
          step = _this$props2.step,
          min = _this$props2.min;
      var newValue = _this.isEmpty(value) ? min - 1 : value;

      _this.changeValue(newValue, step, 'increase');
    };

    _this.onChangeText = function (value) {
      var newValue;

      if (!value) {
        newValue = '';
      } else {
        newValue = Number(value);

        if (isNaN(newValue)) {
          newValue = '';
        }
      }

      _this.changeValue(newValue, _this.props.step, 'input');
    };

    _this.onBlur = function () {
      _this.props.onBlur && _this.props.onBlur();
    };

    _this.changeValue = function (value, step, action) {
      if (step === void 0) {
        step = 1;
      }

      var _this$props3 = _this.props,
          max = _this$props3.max,
          min = _this$props3.min;
      var newValue;

      if (value === '') {
        newValue = '';
      } else {
        if (action === 'input') {
          newValue = value;
        } else {
          newValue = value + step;
        }

        if (newValue > max) {
          newValue = max;
        }

        if (newValue < min) {
          newValue = min;
        }
      }

      _this.props.onChange && _this.props.onChange(newValue, _this.props.value, action);
    };

    return _this;
  }

  var _proto = Stepper.prototype;

  _proto.isEmpty = function isEmpty(value) {
    return value == null || value === '';
  } // 自定义渲染加减按钮
  ;

  _proto.renderButton = function renderButton(button, enable) {
    if (typeof button === 'function') {
      return button(enable);
    } else if ( /*#__PURE__*/React.isValidElement(button)) {
      return button;
    } else {
      return null;
    }
  };

  _proto.render = function render() {
    var _this$props4 = this.props,
        value = _this$props4.value,
        editable = _this$props4.editable,
        style = _this$props4.style,
        operatorStyle = _this$props4.operatorStyle,
        inputStyle = _this$props4.inputStyle,
        operatorIconColor = _this$props4.operatorIconColor,
        max = _this$props4.max,
        min = _this$props4.min,
        decreaseButton = _this$props4.decreaseButton,
        increaseButton = _this$props4.increaseButton;
    var increasable;
    var decreasable;

    if (this.isEmpty(value)) {
      increasable = true;
      decreasable = true;
    } else {
      value = Number(value);

      if (isNaN(value)) {
        value = 0;
      }

      increasable = Boolean(value < max);
      decreasable = Boolean(value > min);
    }

    var textInputValue = this.isEmpty(value) ? '' : String(value);
    return /*#__PURE__*/React.createElement(View, {
      style: [stepperStyles.container, style]
    }, /*#__PURE__*/React.createElement(TouchableOpacity, {
      activeOpacity: variables.hyOpacity,
      onPress: this.onDecrease,
      disabled: !decreasable
    }, this.renderButton(decreaseButton, decreasable) || /*#__PURE__*/React.createElement(View, {
      style: [stepperStyles.ctrl, operatorStyle, !decreasable ? stepperStyles.disabled : null]
    }, /*#__PURE__*/React.createElement(View, {
      style: [stepperStyles.ctrlSymbolHor, {
        backgroundColor: operatorIconColor
      }]
    }))), /*#__PURE__*/React.createElement(TextInput, {
      style: [stepperStyles.input, inputStyle],
      value: textInputValue,
      onChangeText: this.onChangeText,
      onBlur: this.onBlur,
      editable: editable,
      keyboardType: "numeric"
    }), /*#__PURE__*/React.createElement(TouchableOpacity, {
      activeOpacity: variables.hyOpacity,
      onPress: this.onIncrease,
      disabled: !increasable
    }, this.renderButton(increaseButton, increasable) || /*#__PURE__*/React.createElement(View, {
      style: [stepperStyles.ctrl, operatorStyle, !increasable ? stepperStyles.disabled : null]
    }, /*#__PURE__*/React.createElement(View, {
      style: [stepperStyles.ctrlSymbolHor, {
        backgroundColor: operatorIconColor
      }]
    }), /*#__PURE__*/React.createElement(View, {
      style: [stepperStyles.ctrlSymboVer, {
        backgroundColor: operatorIconColor
      }]
    }))));
  };

  return Stepper;
}(Component);
Stepper.defaultProps = {
  operatorIconColor: variables.hyGrayDarker,
  min: 1,
  max: 5,
  step: 1,
  editable: false,
  value: '',
  decreaseButton: null,
  increaseButton: null
};