function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

import React from 'react';
import { Image } from 'react-native';
import variables from '../../common/styles/variables';
import { iconMapping } from './styles';
export var Icon = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Icon, _React$Component);

  function Icon() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = Icon.prototype;

  _proto.render = function render() {
    var _this$props = this.props,
        type = _this$props.type,
        size = _this$props.size,
        style = _this$props.style,
        tintColor = _this$props.tintColor,
        source = _this$props.source;
    var mainStyle = {
      tintColor: tintColor,
      width: size,
      height: size
    };

    if (size == null) {
      delete mainStyle.width;
      delete mainStyle.height;
    }

    if (!source) {
      source = iconMapping[type];
    }

    return /*#__PURE__*/React.createElement(Image, {
      style: [style, _objectSpread({}, mainStyle)],
      source: source
    });
  };

  return Icon;
}(React.Component);
Icon.displayName = 'Icon';
Icon.defaultProps = {
  type: 'angle-down',
  size: 14,
  style: {},
  tintColor: variables.hyBrandPrimaryDark,
  source: null
};