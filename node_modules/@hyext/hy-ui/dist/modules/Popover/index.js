function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

import React from 'react';
import { View, Text } from 'react-native';
import { SlideModal } from '../../components/SlideModal';
import variables from '../../common/styles/variables';
export var Popover = /*#__PURE__*/function (_SlideModal) {
  _inheritsLoose(Popover, _SlideModal);

  function Popover(props) {
    return _SlideModal.call(this, props) || this;
  }

  var _proto = Popover.prototype;

  _proto.getContent = function getContent() {
    var inner = /*#__PURE__*/React.isValidElement(this.props.children) ? this.props.children : /*#__PURE__*/React.createElement(View, {
      style: [{
        backgroundColor: variables.hyFillBackdropDark,
        borderRadius: variables.hyRadiusXS,
        paddingHorizontal: variables.hyHSpacingL,
        paddingVertical: variables.hyVSpacingL,
        justifyContent: 'center',
        alignItems: 'center'
      }]
    }, /*#__PURE__*/React.createElement(Text, {
      style: {
        color: '#fff'
      }
    }, this.props.children));
    return SlideModal.prototype.getContent.call(this, inner);
  };

  return Popover;
}(SlideModal);
Popover.defaultProps = _objectSpread(_objectSpread({}, SlideModal.defaultProps), {}, {
  backdropOpacity: 0,
  offsetX: 100,
  offsetY: 100,
  direction: 'down',
  align: 'left',
  fullScreenPatch: [true, true, true],
  cancelable: true
});