function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

import React from 'react';
import { View, Text, TouchableOpacity } from 'react-native';
import variables from '../../common/styles/variables';
import Tree from '../../common/utils/Tree';
import { Icon } from '../../components/Icon';
import treeViewStyles from './styles';
export var TreeView = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(TreeView, _React$Component);

  function TreeView(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;

    _this.handlePress = function (item) {
      var _objectSpread2;

      _this.props.onPress && _this.props.onPress(item);
      var tree = _this.state.tree;

      var fieldKeys = _this.getFieldKeys();

      var index = null;
      tree.some(function (treeItem, treeIndex) {
        if (treeItem[fieldKeys.idKey] === item[fieldKeys.idKey]) {
          index = treeIndex;
          return true;
        }
      });
      var tmpTree = tree.concat();
      tmpTree.splice(index, 1, _objectSpread(_objectSpread({}, item), {}, (_objectSpread2 = {}, _objectSpread2[fieldKeys.activeKey] = !item[fieldKeys.activeKey], _objectSpread2)));

      _this.setState({
        tree: tmpTree
      });
    };

    _this.state = _objectSpread({}, _this.init(props));
    return _this;
  }

  var _proto = TreeView.prototype;

  _proto.init = function init(props) {
    var dataStructureType = props.dataStructureType,
        data = props.data;
    var fieldKeys = this.getFieldKeys(props);
    var tree = new Tree(_objectSpread(_objectSpread({
      type: dataStructureType
    }, fieldKeys), {}, {
      data: data
    })).getData();
    return {
      tree: tree
    };
  };

  _proto.getFieldKeys = function getFieldKeys(props) {
    props = props || this.props;
    var fieldKeys = props.fieldKeys || {};
    return {
      idKey: fieldKeys.idKey || 'id',
      pIdKey: fieldKeys.pIdKey || 'pId',
      labelKey: fieldKeys.labelKey || 'label',
      childrenKey: fieldKeys.childrenKey || 'children',
      activeKey: fieldKeys.activeKey || 'active',
      checkedKey: fieldKeys.checkedKey || 'checked',
      disabledKey: fieldKeys.disabledKey || 'disabled'
    };
  };

  _proto.renderItem = function renderItem(data, level) {
    var _this2 = this;

    var tree = this.state.tree;
    var _this$props = this.props,
        activeIcon = _this$props.activeIcon,
        inactiveIcon = _this$props.inactiveIcon;
    var fieldKeys = this.getFieldKeys();

    if (!data) {
      data = tree.filter(function (item) {
        return item[fieldKeys.pIdKey] == null;
      });
    }

    level = level || 1;
    return /*#__PURE__*/React.createElement(View, null, data.map(function (item, index) {
      var children = tree.filter(function (treeItem) {
        return treeItem[fieldKeys.pIdKey] === item[fieldKeys.idKey];
      });
      return /*#__PURE__*/React.createElement(View, {
        key: index,
        style: [{
          marginLeft: 20 * (level - 1)
        }]
      }, /*#__PURE__*/React.createElement(TouchableOpacity, {
        style: [treeViewStyles.item],
        onPress: _this2.handlePress.bind(_this2, item)
      }, children.length && /*#__PURE__*/React.createElement(View, {
        style: treeViewStyles.itemIcon
      }, item[fieldKeys.activeKey] ? activeIcon : inactiveIcon), /*#__PURE__*/React.createElement(Text, {
        style: [treeViewStyles.itemText]
      }, item[fieldKeys.labelKey])), children.length && !!item[fieldKeys.activeKey] ? _this2.renderItem(children, level + 1) : null);
    }));
  };

  _proto.render = function render() {
    return /*#__PURE__*/React.createElement(View, {
      style: [treeViewStyles.container, this.props.style]
    }, this.renderItem());
  };

  return TreeView;
}(React.Component);
TreeView.defaultProps = {
  style: {},
  activeIcon: /*#__PURE__*/React.createElement(Icon, {
    source: require("../../common/images/icons/angle-down.png"),
    tintColor: variables.hyGrayBase
  }),
  inactiveIcon: /*#__PURE__*/React.createElement(Icon, {
    source: require("../../common/images/icons/angle-right.png"),
    tintColor: variables.hyGrayBase
  }),
  data: [],
  dataStructureType: 'nested',
  fieldKeys: {}
};