function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import { ScrollView, View, Text } from 'react-native';
import { TopviewGetInstance } from '../../components/Topview';
import variables from '../../common/styles/variables';
import { range } from '../../common/utils';
export var Ruler = /*#__PURE__*/function (_Component) {
  _inheritsLoose(Ruler, _Component);

  function Ruler(p) {
    var _this;

    _this = _Component.call(this, p) || this;
    _this.state = {
      topviewId: null
    };
    return _this;
  }

  var _proto = Ruler.prototype;

  _proto.componentDidMount = function componentDidMount() {
    var _this2 = this;

    if (this.state.topviewId) {
      return;
    }

    TopviewGetInstance() && TopviewGetInstance().add(this.renderFullScreenView()).then(function (id) {
      _this2.setState({
        topviewId: id
      });
    });
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    TopviewGetInstance() && TopviewGetInstance().remove(this.state.topviewId);
  };

  _proto.renderFullScreenView = function renderFullScreenView() {
    var _this$props = this.props,
        direction = _this$props.direction,
        style = _this$props.style;
    return /*#__PURE__*/React.createElement(View, {
      style: {
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        flexDirection: direction === 'vertical' ? 'column' : 'row',
        alignItems: 'flex-start'
      },
      pointerEvents: "box-none"
    }, /*#__PURE__*/React.createElement(ScrollView, {
      style: [{
        marginLeft: direction === 'vertical' ? 40 : null,
        marginTop: direction === 'vertical' ? null : 200
      }, style],
      contentContainerStyle: {
        flexDirection: direction === 'vertical' ? 'column' : 'row',
        alignItems: 'flex-start'
      },
      horizontal: direction === 'horizontal',
      showsHorizontalScrollIndicator: true,
      showsVerticalScrollIndicator: true
    }, range(100).map(function (item) {
      var index = item + 1;
      var evenNumber = index % 2 === 0;
      var base = 10;
      var value = index * base;
      var showValue = value % 50 === 0;
      var valueViewHeight = direction === 'vertical' ? base : null;
      var valueViewWidth = direction === 'vertical' ? null : base;
      return /*#__PURE__*/React.createElement(View, {
        key: item,
        style: {
          flexDirection: direction === 'vertical' ? 'row' : 'column'
        }
      }, /*#__PURE__*/React.createElement(View, {
        style: {
          height: base,
          width: base,
          backgroundColor: evenNumber ? variables.hyGrayLightest : variables.hyGrayBase
        }
      }), /*#__PURE__*/React.createElement(View, {
        style: {
          height: valueViewHeight,
          width: valueViewWidth
        }
      }, showValue ? /*#__PURE__*/React.createElement(View, {
        style: {
          height: valueViewHeight,
          width: valueViewWidth,
          backgroundColor: variables.hyBrandDanger,
          justifyContent: 'center',
          alignItems: 'center'
        }
      }, /*#__PURE__*/React.createElement(Text, {
        style: {
          textAlignVertical: 'center',
          textAlign: 'center',
          fontSize: 10,
          color: '#fff'
        },
        numberOfLines: undefined
      }, value)) : null));
    })));
  };

  _proto.render = function render() {
    return null;
  };

  return Ruler;
}(Component);
Ruler.defaultProps = {
  direction: 'vertical'
};