function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

import React from 'react';
import { ScrollView, Animated } from 'react-native';
import { SlideModal } from '../../components/SlideModal';
import { Radio } from '../../components/Radio';
import dropdownStyles from './styles';
import variables from '../../common/styles/variables';
import { SlideAnimated } from '../../common/animations';
export var Dropdown = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Dropdown, _React$Component);

  function Dropdown(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.slideModal = null;
    _this.animated = null;

    if (variables.dropdownEnableAnimated) {
      _this.animated = new SlideAnimated({
        directionType: ['vertical'],
        duration: 1000,
        translateYList: [props.direction === 'down' ? -20 : 20, 0]
      });
    }

    return _this;
  }

  var _proto = Dropdown.prototype;

  _proto.open = function open() {
    this.animated && this.animated.toIn();
    return this.slideModal.open();
  };

  _proto.close = function close() {
    return this.slideModal.close();
  };

  _proto.getContent = function getContent() {
    var _this2 = this;

    var _this$props = this.props,
        data = _this$props.data,
        value = _this$props.value,
        _onChange = _this$props.onChange,
        checkedIcon = _this$props.checkedIcon,
        uncheckedIcon = _this$props.uncheckedIcon;
    var animatedStyle = {};

    if (this.animated) {
      animatedStyle = {
        transform: [{
          translateX: this.animated.getState().translateX
        }, {
          translateY: this.animated.getState().translateY
        }],
        opacity: this.animated.getState().opacity
      };
    }

    return /*#__PURE__*/React.createElement(ScrollView, {
      style: [dropdownStyles.container, this.props.style]
    }, /*#__PURE__*/React.createElement(Animated.View, {
      style: animatedStyle
    }, /*#__PURE__*/React.createElement(Radio, {
      checkedIcon: checkedIcon,
      uncheckedIcon: uncheckedIcon,
      value: value,
      onChange: function onChange(value) {
        _this2.slideModal.close();

        _onChange(value);
      }
    }, data.map(function (item, index) {
      return /*#__PURE__*/React.createElement(Radio.Item, {
        testID: item.testID,
        key: index,
        label: item.label,
        value: item.value
      });
    }))));
  };

  _proto.render = function render() {
    var _this3 = this;

    var direction = this.props.direction;
    var fullScreenPatch = this.props.fullScreenPatch || (direction === 'down' ? [true, false, false] : [false, false, true]);
    return /*#__PURE__*/React.createElement(SlideModal, {
      ref: function ref(c) {
        _this3.slideModal = c;
      },
      fullScreenPatch: fullScreenPatch,
      direction: this.props.direction,
      offsetX: this.props.offsetX,
      offsetY: this.props.offsetY,
      cancelable: this.props.cancelable
    }, this.getContent());
  };

  return Dropdown;
}(React.Component);
Dropdown.defaultProps = _objectSpread(_objectSpread({}, SlideModal.defaultProps), {}, {
  cancelable: false,
  direction: 'down',
  fullScreenPatch: null,
  data: []
});