function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { Animated, Easing } from 'react-native';

var CommonAnimated = /*#__PURE__*/function () {
  function CommonAnimated(props) {
    props = props || {};
    this.state = {
      opacityList: props.opacityList || [0, 1],
      duration: props.duration || 300,
      easing: props.easing || Easing.elastic(0.8)
    };
  }

  var _proto = CommonAnimated.prototype;

  _proto.getState = function getState() {
    return _objectSpread({}, this.state);
  };

  _proto.setState = function setState(key, value) {
    this.state[key] = value;
  };

  _proto.stop = function stop() {
    if (this.animated) {
      this.animated.stop();
      this.animated = null;
    }
  }
  /* tslint:disable:no-empty */
  ;

  _proto.toIn = function toIn() {}
  /* tslint:disable:no-empty */
  ;

  _proto.toOut = function toOut() {};

  return CommonAnimated;
}();

export var FadeAnimated = /*#__PURE__*/function (_CommonAnimated) {
  _inheritsLoose(FadeAnimated, _CommonAnimated);

  function FadeAnimated(props) {
    var _this;

    props = props || {};
    _this = _CommonAnimated.call(this, props) || this;
    _this.state = _objectSpread(_objectSpread({}, _this.state), {}, {
      scaleList: [0, 1],
      translateXList: [null, null],
      translateYList: [null, null]
    }, props);
    _this.state.opacity = new Animated.Value(_this.getPropertyValue('opacity', true));
    _this.state.scale = new Animated.Value(_this.getPropertyValue('scale', true));
    _this.state.translateX = new Animated.Value(_this.getPropertyValue('translateX', true));
    _this.state.translateY = new Animated.Value(_this.getPropertyValue('translateY', true));
    return _this;
  }

  var _proto2 = FadeAnimated.prototype;

  _proto2.getPropertyValue = function getPropertyValue(type, tag) {
    if (tag) {
      return this.state[type + 'List'][0];
    } else {
      return this.state[type + 'List'][1];
    }
  };

  _proto2.toIn = function toIn() {
    return this.fade(true);
  };

  _proto2.toOut = function toOut() {
    return this.fade(false);
  };

  _proto2.reset = function reset(params) {
    var _this2 = this;

    var ret = {};
    params.forEach(function (paramItem) {
      var key = paramItem.key + 'List';

      var tmp = _this2.state[key].concat();

      tmp.splice(0, 1, paramItem.value);
      ret[key] = tmp;
    });
    this.state = _objectSpread(_objectSpread({}, this.state), ret);
  };

  _proto2.fade = function fade(tag) {
    var _this3 = this;

    this.stop();
    this.state.opacity.setValue(this.getPropertyValue('opacity', tag));
    this.state.scale.setValue(this.getPropertyValue('scale', tag));
    this.state.translateX.setValue(this.getPropertyValue('translateX', tag));
    this.state.translateY.setValue(this.getPropertyValue('translateY', tag));
    return new Promise(function (resolve) {
      var invalid = ['translateXList', 'translateYList'].some(function (key) {
        return _this3.state[key][0] == null;
      });

      if (invalid) {
        setTimeout(function () {
          resolve('pre animated end'); // console.log('pre animated end')
        }, 100);
      } else {
        resolve('pre animated end');
      }
    }).then(function () {
      _this3.state.translateX.setValue(_this3.getPropertyValue('translateX', tag));

      _this3.state.translateY.setValue(_this3.getPropertyValue('translateY', tag));

      _this3.animated = Animated.parallel([Animated.timing(_this3.state.opacity, {
        toValue: _this3.getPropertyValue('opacity', !tag),
        duration: _this3.state.opacityDuration || _this3.state.duration,
        easing: _this3.state.easing
      }), Animated.timing(_this3.state.scale, {
        toValue: _this3.getPropertyValue('scale', !tag),
        duration: _this3.state.scaleDuration || _this3.state.duration,
        easing: _this3.state.easing
      }), Animated.timing(_this3.state.translateX, {
        toValue: _this3.getPropertyValue('translateX', !tag),
        duration: _this3.state.duration,
        easing: _this3.state.easing
      }), Animated.timing(_this3.state.translateY, {
        toValue: _this3.getPropertyValue('translateY', !tag),
        duration: _this3.state.duration,
        easing: _this3.state.easing
      })]);
    }).then(function () {
      return new Promise(function (resolve) {
        _this3.animated.start(function () {
          resolve('animated end');
        });
      })["catch"](function (e) {
        console.log(e);
      });
    });
  };

  return FadeAnimated;
}(CommonAnimated);
export var SlideAnimated = /*#__PURE__*/function (_CommonAnimated2) {
  _inheritsLoose(SlideAnimated, _CommonAnimated2);

  function SlideAnimated(props) {
    var _this4;

    props = props || {};
    _this4 = _CommonAnimated2.call(this, props) || this;
    _this4.state = _objectSpread(_objectSpread({}, _this4.state), {}, {
      directionType: ['horizontal'],
      translateYList: [null, 0],
      translateXList: [null, 0]
    }, props);
    _this4.state.opacity = new Animated.Value(_this4.getPropertyValue('opacity', true));
    _this4.state.translateY = new Animated.Value(_this4.getPropertyValue('translateY', true));
    _this4.state.translateX = new Animated.Value(_this4.getPropertyValue('translateX', true));
    return _this4;
  }

  var _proto3 = SlideAnimated.prototype;

  _proto3.reset = function reset(params) {
    var _this5 = this;

    var map = {
      vertical: 'translateYList',
      horizontal: 'translateXList'
    };
    var ret = {};
    params.forEach(function (paramItem) {
      var key = map[paramItem.directionTypeItem];

      var tmp = _this5.state[key].concat();

      tmp.splice(0, 1, paramItem.size);
      ret[key] = tmp;
    });
    this.state = _objectSpread(_objectSpread({}, this.state), ret);
  };

  _proto3.getPropertyValue = function getPropertyValue(type, tag) {
    var tmp = tag ? this.state[type + 'List'][0] : this.state[type + 'List'][1];
    return tmp == null ? 0 : tmp;
  };

  _proto3.toIn = function toIn() {
    return this.slide(true);
  };

  _proto3.toOut = function toOut() {
    return this.slide(false);
  };

  _proto3.slide = function slide(tag) {
    var _this6 = this;

    this.stop();
    this.state.opacity.setValue(this.getPropertyValue('opacity', tag));
    var map = {
      vertical: 'translateY',
      horizontal: 'translateX'
    };
    var keys = this.state.directionType.map(function (item) {
      return map[item];
    });
    keys.forEach(function (key) {
      _this6.state[key].setValue(_this6.getPropertyValue(key, tag));
    });
    return new Promise(function (resolve) {
      var invalid = keys.some(function (key) {
        return _this6.state[key + 'List'][0] == null;
      });

      if (invalid) {
        setTimeout(function () {
          // console.log('setTimeout 100 resolve')
          resolve('pre animated end');
        }, 100);
      } else {
        resolve('pre animated end');
      }
    }).then(function (ret) {
      keys.forEach(function (key) {
        _this6.state[key].setValue(_this6.getPropertyValue(key, tag));
      });
      var parallelArray = keys.map(function (key) {
        return Animated.timing(_this6.state[key], {
          toValue: _this6.getPropertyValue(key, !tag),
          duration: _this6.state.duration,
          easing: _this6.state.easing
        });
      });
      _this6.animated = Animated.parallel([Animated.timing(_this6.state.opacity, {
        toValue: _this6.getPropertyValue('opacity', !tag),
        duration: _this6.state.duration,
        easing: _this6.state.easing
      })].concat(parallelArray));
      return new Promise(function (resolve) {
        _this6.animated.start(function () {
          resolve('animated end');
        });
      });
    })["catch"](function (e) {
      console.log(e);
    });
  };

  return SlideAnimated;
}(CommonAnimated);