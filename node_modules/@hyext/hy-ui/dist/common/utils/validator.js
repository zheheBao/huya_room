var rules = {
  required: function required(val) {
    return !/^\s*$/.test(val);
  },
  phone: function phone(val) {
    return /^1[34578]\d{9}$/.test(val);
  },
  date: function date(val) {
    return /^[1-9]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/.test(val);
  },
  email: function email(val) {
    return /^[a-z0-9]+([._\\-]*[a-z0-9])*@([a-z0-9]+[-a-z0-9]*[a-z0-9]+.){1,63}[a-z0-9]+$/.test(val);
  }
};

function register(ruleName, fn) {
  if (typeof fn === 'function' && ruleName) {
    rules[ruleName] = fn;
  }
}

function createCallValidateQueueFn(validateQueue) {
  return function (val) {
    var pass = true;
    var noPassRuleIndexs = [];
    validateQueue.forEach(function (fn, i) {
      var result = fn(val);

      if (!result) {
        pass = false;
        noPassRuleIndexs.push(i);
      }
    });
    return {
      pass: pass,
      noPassRuleIndexs: noPassRuleIndexs
    };
  };
}

function getFnByRule(ruleNames) {
  return ruleNames.map(function (ruleName) {
    var fn = rules[ruleName];

    if (!fn) {
      throw new RangeError("\u89C4\u5219[" + ruleName + "]\u4E0D\u5728\u5DF2\u6CE8\u518C\u7684\u89C4\u5219\u4E2D");
    }

    return fn;
  });
}

function resolveValidate(validate) {
  var validFnQueue;

  if (typeof validate === 'string') {
    var ruleNames = validate.split('|');
    validFnQueue = getFnByRule(ruleNames);
  } else if (Array.isArray(validate)) {
    validFnQueue = validate;
  } else if (typeof validate === 'function') {
    validFnQueue = [validate];
  } else {
    throw new TypeError("validate\u5FC5\u987B\u662Fstring|function|array");
  }

  return createCallValidateQueueFn(validFnQueue);
}

function resolveDataProperty(data, key) {
  var formItemValue = data[key];
  var val = typeof formItemValue === 'object' && formItemValue !== null ? formItemValue.value : formItemValue;

  if (val === void 0) {
    throw new Error('validateMapping存在data之外的属性，请确保该属性存在data对象中');
  }

  return val;
}

function collectErrors(errors, indexs) {
  var errorMsg = [];
  indexs.forEach(function (index, i) {
    errorMsg[i] = errors[index];
  });
  return errorMsg;
}

function singleValidate(value, ruleKey) {
  var checkFn = rules[ruleKey];

  if (!checkFn) {
    throw new TypeError(ruleKey + " not exsit in default rules");
  }

  return checkFn(value);
}

export var Validator = /*#__PURE__*/function () {
  function Validator(validateMapping, data) {
    this.validateMapping = null;
    this.validateFnMapping = null;
    this.data = null;
    if (!validateMapping) throw new Error('validateMapping对象不存在，请传入');
    if (!data) throw new Error('data对象不存在，请传入');
    this.data = data;
    this.validateMapping = validateMapping;
    this.init(validateMapping);
  }

  var _proto = Validator.prototype;

  _proto.init = function init(validateMapping) {
    var validateFnMapping = {};
    Object.keys(validateMapping).forEach(function (name) {
      validateFnMapping[name] = resolveValidate(validateMapping[name].validate);
    });
    this.validateFnMapping = validateFnMapping;
  };

  _proto.validate = function validate() {
    var validateMapping = this.validateMapping;
    var data = this.data;
    var validateFnMapping = this.validateFnMapping;
    var check = null;
    var result = {
      pass: true,
      msg: []
    };
    var validateConfig;
    var validateFn;
    var formItemValue;

    function whenNotPass(validateConfig) {
      result.pass = validateConfig.result = false;
      result.msg.push({
        name: validateConfig.name,
        errors: collectErrors(validateConfig.error, check.noPassRuleIndexs)
      });
      validateConfig.firstErrorIndex = check.noPassRuleIndexs[0];
    }

    function whenPass(validateConfig) {
      validateConfig.firstErrorIndex = null;
      validateConfig.result = true;
    }

    for (var _key in validateMapping) {
      formItemValue = resolveDataProperty(data, _key);
      validateConfig = validateMapping[_key];
      validateFn = validateFnMapping[_key];
      check = validateFn(formItemValue);

      if (!check.pass) {
        whenNotPass(validateConfig);
      } else {
        whenPass(validateConfig);
      }
    }

    return result;
  };

  return Validator;
}();
Validator.register = register;
Validator.singleValidate = singleValidate;